<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/dev-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/dev-blog/" rel="alternate" type="text/html" /><updated>2022-09-03T23:52:30-07:00</updated><id>http://localhost:4000/dev-blog/feed.xml</id><title type="html">100 Days of Code</title><subtitle>Sammy Au&apos;s 100 Days of Code</subtitle><entry><title type="html">16/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/03/day16.html" rel="alternate" type="text/html" title="16/100 Days of Code" /><published>2022-09-03T15:30:23-07:00</published><updated>2022-09-03T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/03/day16</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/03/day16.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;
Another day of trying to debug type issues!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Following the &lt;a href=&quot;https://stackoverflow.com/questions/59125973/react-typescript-argument-of-type-is-not-assignable-to-parameter-of-type&quot;&gt;Stack Overflow discussion&lt;/a&gt; I saw yesterday, I added an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; and assigned the type to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useState&lt;/code&gt; input, resolving that error message.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nl&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setCurrentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/UserContext.Provider&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;However, making this change broke my login function as that also set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentUser&lt;/code&gt; as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; for the App Context, but adding the interface cause a type disagreement. Luckily, the solution was simply removing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setCurrentUser&lt;/code&gt; from the login function and only allow the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook that has the localStorage token in the dependency array to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentUser&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Note this works because the login function is what sets the token in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; dependency array&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Then going back to clean up my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component to utilize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useContext&lt;/code&gt; hook I encountered another interesting bug
    &lt;ul&gt;
      &lt;li&gt;At the moment, my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useContext&lt;/code&gt; provides the value for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserContext&lt;/code&gt; which is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; object until the username is set from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt; function in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook in the App component.&lt;/li&gt;
      &lt;li&gt;However, when I check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typeof&lt;/code&gt; for the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; extracted from UserContext after it’s set, the type is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Despite it being a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; when I pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; into the Paragraph component from the Evergreen component library, I receive an error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;This JSX tag&apos;s &apos;children&apos; prop expects a single child of type &apos;Element | undefined&apos;, but multiple children were provided&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To resolve this bug, I came across these possible solutions from &lt;a href=&quot;https://stackoverflow.com/questions/62382324/react-typescript-this-jsx-tags-children-prop-expects-a-single-child-of-type&quot;&gt;Stack Overflow&lt;/a&gt; and a &lt;a href=&quot;https://bobbyhadz.com/blog/react-this-tags-children-prop-expects-single-child&quot;&gt;blog post&lt;/a&gt; about this error.
    &lt;ul&gt;
      &lt;li&gt;For my use case, wrapping the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prop&lt;/code&gt; being passed into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Paragraph&lt;/code&gt; component in a fragment is enough. This may be an issue as the data in the Context expands to include other values, but in terms of trying to figure out how to properly provide and subscribe to Context, this is good for now.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue cleaning up and refactoring my hooks, namely the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; as there is a dependency array warning that will cause build errors.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session Another day of trying to debug type issues!</summary></entry><entry><title type="html">15/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/02/day15.html" rel="alternate" type="text/html" title="15/100 Days of Code" /><published>2022-09-02T15:30:23-07:00</published><updated>2022-09-02T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/02/day15</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/02/day15.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Tried to flesh out the user session process today
    &lt;ul&gt;
      &lt;li&gt;The planned flow at a high level is:
        &lt;ol&gt;
          &lt;li&gt;On app’s first load of the app/portfolio page, it reaches out to backend&lt;/li&gt;
          &lt;li&gt;(If logged in) backend will take JWT and return the application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; + portfolio info&lt;/li&gt;
          &lt;li&gt;Username will be available from application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This brings to question if decoding the username and then sending that back to the backend is necessary
    &lt;ul&gt;
      &lt;li&gt;The original idea was decoding the username from the JWT in localStorage and sending that as a parameter to a backend route that would return the user’s information (like portfolio) along with a JWT to be verified&lt;/li&gt;
      &lt;li&gt;Then the returned user information will be stored in the application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However with this approach there’s a concern about the returned data being too big (e.g. a large portfolio) and the app context really only needs the username
    &lt;ul&gt;
      &lt;li&gt;At the moment I’ll be marking these concerns down to think about but I’ll continue on with the approach of returning the user’s information/portfolio to be stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In addition to trying to expand on how to handle user sessions, I moved my login function from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component up to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component. This was needed as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component is where I want the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; to be set and provided from, and logging in also provides the information needed for updating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;. This login function is then passed down to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component
    &lt;ul&gt;
      &lt;li&gt;This will also be helpful for when if I decide to remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component and have the login function passed to a different component&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;With this change in the login function and having it update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; too, I encountered type issues regarding the state used for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;As it stands, the default state for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentUser&lt;/code&gt; state is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; and upon logging in or restoring a user session, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentUser&lt;/code&gt; is set to the user’s username (for now while I’m working on making sure user sessions is working).&lt;/li&gt;
      &lt;li&gt;Haven’t looked too deeply into this issue yet, but possible solutions I’ve seen are &lt;a href=&quot;https://stackoverflow.com/questions/59125973/react-typescript-argument-of-type-is-not-assignable-to-parameter-of-type&quot;&gt;applying an interface&lt;/a&gt; or maybe utilizing a guard statement.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue expanding the user session implementation and debug these typing issues.&lt;/li&gt;
  &lt;li&gt;Refactor the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component as that now has a lot of overloaded variables and removing them may present more issues that’ll need to be resolved.&lt;/li&gt;
  &lt;li&gt;I imagine this is the final stretch for this feature, so a retro will be coming soon&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session</summary></entry><entry><title type="html">14/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/01/day14.html" rel="alternate" type="text/html" title="14/100 Days of Code" /><published>2022-09-01T15:30:23-07:00</published><updated>2022-09-01T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/01/day14</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/01/day14.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jumped back into working on getting user sessions set up! &lt;sub&gt;Except I had to spend some time resolving merge conflicts with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch after all my recent PRs being merged…&lt;/sub&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First thing I needed to change was figuring out how to store user information for the entire app to have access to.
    &lt;ol&gt;
      &lt;li&gt;I updated my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component to store the JWT sent from the server.
        &lt;ul&gt;
          &lt;li&gt;This component will likely be removed as I expand the app since it was more of a temporary component to make sure I could get Discord OAuth working.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Then in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component I needed an extra function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt;, inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook that checks if there’s a JWT token in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage&lt;/code&gt;.
        &lt;ul&gt;
          &lt;li&gt;The goal of this function is to decode the JWT token and extract the username from the token to send to the server.&lt;/li&gt;
          &lt;li&gt;Upon successful validation of the information in the JWT token, the server will send back the user’s info which will be set as the current user&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;In order for this whole flow to work out, I would need a new route in my server (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/user/:username&lt;/code&gt;), a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PaperTraderApi&lt;/code&gt; method to send the necessary information to this route, and utilize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.Context&lt;/code&gt; to share the current user information for all components that subscribe to the context.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;With the plan set up, implementing it was mostly straightforward. Everything went smoothly except for trying to decode the JWT token in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt; function, where I encountered a very confusing bug.
    &lt;ol&gt;
      &lt;li&gt;I had some type issues with the returned value from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt;function. I tried doing the same conditional checks that I did when I last had type issues with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt; by only accessing the value within conditional statements that are true.&lt;/li&gt;
      &lt;li&gt;Unfortunately that wasn’t enough, and after whittling away at the issue, my bug came down to:
        &lt;ul&gt;
          &lt;li&gt;The Chrome console showed that the value from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt;, which I named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodedToken&lt;/code&gt; is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt; variable that had key value pairs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{username: USERNAME_STRING, iat: NUMBERS}&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; is the key value pair I wanted to extract&lt;/li&gt;
          &lt;li&gt;However, I kept getting a compilation error from Typescript where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodedToken&lt;/code&gt; was treated as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; so when I tried to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; key via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dedcodedToken.username&lt;/code&gt;, I got an error that stated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property &apos;username&apos; does not exist on type &apos;string&apos;.&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;This was very confusing as when I did &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log(typeof decodedToken)&lt;/code&gt;, I got &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; and the variable showed up as an object structure with key value pairs&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;After some time, I asked a friend for help and he suggested trying to convert the variable into JSON which worked!
    &lt;ol&gt;
      &lt;li&gt;First, I had to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON.stringify(decodedToken)&lt;/code&gt; and store that as a variable, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonToken&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Then, I saved the result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON.parse(jsonToken)&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parsedJson&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Finally, I could do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parsedJson.username&lt;/code&gt; to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; value without any errors&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;This felt like a very roundabout way resolve this issue. However, the typing of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodedToken&lt;/code&gt; is explicitly changed into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; and then an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt;, which is probably why Typescript compilation doesn’t have issues anymore.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue expanding the user session implementation, and then start refactoring again
    &lt;ul&gt;
      &lt;li&gt;There are some functions and states that could be brought up higher in the component hierarchy now that I’ve expanded on what data the components need to have access to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session</summary></entry><entry><title type="html">13/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/08/31/day13.html" rel="alternate" type="text/html" title="13/100 Days of Code" /><published>2022-08-31T15:30:23-07:00</published><updated>2022-08-31T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/08/31/day13</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/08/31/day13.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fly.io CI/CD debugging&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another full day trying to figure out deployment issues. Depsite the frustration, this should set the ground work for easier build and deployment when future features are implemented!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The first issue I tried tackling was leftover from yesterday, the Github Action that deletes the temporary Github Environments from a PR.
    &lt;ul&gt;
      &lt;li&gt;The action would find the environment, detect the number of deployments in it, and deactive them all before deleting the entire environment. That’s the expected behavior.&lt;/li&gt;
      &lt;li&gt;However, when I ran the action, it would find the environment and detect the deployments, but would stop and spit out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**Error** Not Found&lt;/code&gt;
  &lt;img src=&quot;../../../../images/20220831/githubactionerror.png&quot; alt=&quot;Github Action Error on PR Close&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Oddly, when I pass in an environment value that doesn’t exist, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non-existent-env&lt;/code&gt;, it would run the action without issues
  &lt;img src=&quot;../../../../images/20220831/githubactionsuccess.png&quot; alt=&quot;Github Action Success on PR Close with nonexistent environment&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Given the lack of progress of getting through this error, I decided to just comment out this portion of the Github Action to revist in the future&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Next, I wanted to finally close the PR for Discord OAuth implementation, which meant I had to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BACKEND_BASE_URL&lt;/code&gt; for React to know where the server is located. However, there wasn’t anyway to set that on Firebase since it’s more of a build time variable. Thus, I changed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.ts&lt;/code&gt; to explictly set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BACKEND_BASE_URL&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// previously &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BACKEND_BASE_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REACT_BASE_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// currently&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BACKEND_BASE_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://paper-trader.fly.dev/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// trailing &quot;/&quot;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Now that the Github Actions for CI/CD were finalized, I merged the previous PR for Discord OAuth to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; and watched the magic happen as everything was automatically rebuilt and redeployed!
    &lt;ul&gt;
      &lt;li&gt;Except when I tried the Discord OAuth flow on the deployed app, I got a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS&lt;/code&gt; error and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;502&lt;/code&gt; error.
        &lt;ul&gt;
          &lt;li&gt;In the console, I noticed there was an extra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; in the server URL, so made a quick change to that in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.ts&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;However, after that change I still got errors after being redirected from Discord
        &lt;ul&gt;
          &lt;li&gt;So I went to dig through the logs on &lt;a href=&quot;https://fly.io/&quot;&gt;fly.io&lt;/a&gt; and noticed my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; was still saying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt;…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I knew my Firebase React frontend is in production as the Discord OAuth authorization confirmation page showed the deployed URL. Which meant my deployed backend on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fly&lt;/code&gt; doesn’t have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_ENV=&apos;production&apos;&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;After tons of searching and digging into the docs, I found an &lt;a href=&quot;https://github.com/superfly/flyctl-actions/issues/9&quot;&gt;open issue for the Github Action&lt;/a&gt; I was using that was very similar to my problem.&lt;/li&gt;
      &lt;li&gt;Based on the discussion, I added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_ENV=&quot;production&quot;&lt;/code&gt; as a variable in both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[build.args]&lt;/code&gt; sections of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fly.toml&lt;/code&gt; file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;With these changes, I can wrap up CI/CD for now such that adding new features and expanding the app will deploy automatically once changes are made to the main branch.
    &lt;ul&gt;
      &lt;li&gt;Of course, tests need to be added to the CI/CD pipeline later on…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Can finally go back to working out user sessions!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader Fly.io CI/CD debugging</summary></entry><entry><title type="html">12/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/08/30/day12.html" rel="alternate" type="text/html" title="12/100 Days of Code" /><published>2022-08-30T15:30:23-07:00</published><updated>2022-08-30T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/08/30/day12</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/08/30/day12.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fly.io CI/CD&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Yesterday, I added a Github Action that allowed for automatic build and deployment to Fly.io once the main branch receives a merge request. However, this build and redeploy doesn’t happen when there’s a pull request, which means that there could be deployment issues that won’t be caught until it hits production environment.&lt;/li&gt;
  &lt;li&gt;To prevent this problem, I added a new Github Action that builds and deploys on pull request. Luckily there was an existing &lt;a href=&quot;https://github.com/superfly/fly-pr-review-apps&quot;&gt;Github Action&lt;/a&gt; that I could utilize. Implementing this required more work than I initially anticipated though:
    &lt;ul&gt;
      &lt;li&gt;When trying to install the action from Github Marketplace, it didn’t offer the customization that I needed:
 &lt;img src=&quot;../../../../images/20220830/PRflyactionmarket.png&quot; alt=&quot;PR Review Apps on fly.io action on Github Marketplace&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Then when I manually try to add the action by creating a new workflow on Github, it creates it on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yml&lt;/code&gt; syntax still isn’t all complete:
 &lt;img src=&quot;../../../../images/20220830/PRflyaction.png&quot; alt=&quot;PR Review Apps on fly.io action via new workflow&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This led me to utilize the basic example from the &lt;a href=&quot;https://github.com/superfly/fly-pr-review-apps&quot;&gt;Github repository&lt;/a&gt; for the action, but that also had issues:
    &lt;ul&gt;
      &lt;li&gt;The name of the action is outdated, being called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brentd/fly-staging-app@v1&lt;/code&gt;, which left me confused about how the this action is utilized in the example. I checked if others had this issue by checking the Issues and Pull Requests tabs, and found that there’s already an open PR regarding this issue. Hopefully it gets accepted and merged. 
 &lt;img src=&quot;../../../../images/20220830/PRflyactionmarketPR.png&quot; alt=&quot;Open PR for this action&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After adjusting the example and customizing my options, I tried to utilize the action but encountered a few errors:
    &lt;ul&gt;
      &lt;li&gt;Without a name for the app, the action is supposed to set one based on the default option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Defaults to pr-{number}-{repo_org}-{repo_name}.&lt;/code&gt; However, I got &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pr-{number}-null-null&lt;/code&gt;, and there is an &lt;a href=&quot;https://github.com/superfly/fly-pr-review-apps/issues/10&quot;&gt;open issue&lt;/a&gt; about it at the time of writing this.&lt;/li&gt;
      &lt;li&gt;Another issue is that the action had another error log related to having two active apps in an organization as I was building a temporary app in the same organization as the production app.
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ...
  Error failed to get app: Could not find App &quot;paper-trader-pr15&quot;
  ...
  Error To create more than 2 apps please add a payment method. https://fly.io/dashboard/paper-trader/billing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;To fix the naming issue, I decided to just give it a name following the repo instructions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp-pr-$&lt;/code&gt;. For the 2 apps issue, I created a new organization in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fly.io&lt;/code&gt; account and had the action create the temporary build deploy there by updating the action environment variable to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env: FLY_ORG: paper-trader-test&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After that, the build and deploy on PR worked! But another feature of this action was not working properly - when the PR is closed, the action destroys the fly app and removes the github environment. Unfortunately, the Github environments are not being removed.
    &lt;ul&gt;
      &lt;li&gt;Looking up the error, there was this &lt;a href=&quot;https://github.com/actions/first-interaction/issues/10&quot;&gt;issue&lt;/a&gt; and the discussion mentioned it happens when there are permission issues.
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Error: Resource not accessible by integration
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Then I remembered a comment in the action that handles deleting Github environments…
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  name: Clean up GitHub environment
  uses: strumwolf/delete-deployment-environment@v2
  if: $
  with:
    # ⚠️ The provided token needs permission for admin write:org
    token: $
    environment: pr-$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;So I created a new token that does have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin write:org&lt;/code&gt; permissions!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unfortunately, after getting passed the permissions error, a new one popped up
    &lt;ul&gt;
      &lt;li&gt;This one appears to be related to the wrong naming convention for the environments? I will have to do more digging into it tomorrow. If I’m unable to find a solution I’ll probably remove the action that cleans up Github environments and just manually delete them to move on for now.
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  deactivating deployments in environment pr-16
  Error: Not Found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Adding User Sessions&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Most of my day was spent trying to figure out the Github actions, but did briefly jump back to my JWT issue. Latching on to my assumption from yesteday about Discord authorization failing so no token it returned, a quick solution was to only utilize the JWT object if it’s valid.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodedToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodeToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// decodeToken is a function from react-jwt&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodedToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodedToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Invalid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Spend a little more time with the Github action, then go back to working on user session&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader Fly.io CI/CD</summary></entry><entry><title type="html">11/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/08/29/day11.html" rel="alternate" type="text/html" title="11/100 Days of Code" /><published>2022-08-29T15:30:23-07:00</published><updated>2022-08-29T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/08/29/day11</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/08/29/day11.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fly.io Deployment&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Deployed server on Fly.io
    &lt;ul&gt;
      &lt;li&gt;Following the docs, it was a pretty straightforward process. They even have a &lt;a href=&quot;https://fly.io/docs/speedrun/&quot;&gt;speedrun guide&lt;/a&gt; for deploying!&lt;/li&gt;
      &lt;li&gt;In addition, I got a PostgreSQL set up and connected to the server as part of the deployment process.&lt;/li&gt;
      &lt;li&gt;Given how quickly I was able to get the server deployed on Fly.io, I decided to also add CI/CD via Github actions, but to be determined if that works properly since it’ll only trigger when merges are made to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch&lt;/li&gt;
      &lt;li&gt;So far, very happy with my experience with Fly.io. Though, as I start expanding the backend, add more environmental variable, and actually utilize the database, my opinion may change.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Adding User Sessions&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Utilizing JWTs
    &lt;ul&gt;
      &lt;li&gt;Plan is to sign username and return a JWT after getting the user’s username from Discord OAuth flow.&lt;/li&gt;
      &lt;li&gt;At the moment, I am having difficulty properly handling the JWT on the frontend
        &lt;ul&gt;
          &lt;li&gt;Originally I used the regular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonwebtoken&lt;/code&gt; npm package but that caused tons of errors. Leading my to switch to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-jwt&lt;/code&gt; per this &lt;a href=&quot;https://stackoverflow.com/a/72571060&quot;&gt;recommendation&lt;/a&gt;.&lt;/li&gt;
          &lt;li&gt;However, this led to typing issues with my JWT decoding, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-jwt&lt;/code&gt; was returning type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unkown&lt;/code&gt;. Following &lt;a href=&quot;https://stackoverflow.com/a/61201393&quot;&gt;this discussion&lt;/a&gt;, I made an interface for my token.&lt;/li&gt;
          &lt;li&gt;Unfortunately, now I have an error with the object returned from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt; possibly being type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;.
            &lt;ul&gt;
              &lt;li&gt;This is likely due to the possibility of user authorization from Discord failing before getting a valid signed JWT from the server.&lt;/li&gt;
              &lt;li&gt;I’ll spend some more time trying to see if adding more validations before preparing the JWT will resolve this typing issue. If not, I’ll take a look at the other JWT packages &lt;a href=&quot;https://stackoverflow.com/a/70856437&quot;&gt;mentioned here&lt;/a&gt; to see if I have better luck debugging the type issues.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue to work on implementing user session&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader Fly.io Deployment</summary></entry><entry><title type="html">10/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/08/28/day10.html" rel="alternate" type="text/html" title="10/100 Days of Code" /><published>2022-08-28T15:30:23-07:00</published><updated>2022-08-28T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/08/28/day10</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/08/28/day10.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Discord OAuth Refactoring&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Unnecessary state
    &lt;ul&gt;
      &lt;li&gt;Following up on the discussion on useCallback and useEffect, my friend wondered if the dependency on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csrfToken&lt;/code&gt; was necessary. Currently, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component generates a string and stores it in localStorage, which the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component checks to validate with Discord OAuth’s echoed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; parameter. Throughout this whole process, only the string in localStorage is being interacted with.&lt;/li&gt;
      &lt;li&gt;This brings to question the necessity of having &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csrfToken&lt;/code&gt; be a state in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component. The state is not being changed or utilized, so to reduce unnecessary complexity, I removed the csrfToken state in the component and just had all relevant components just rely on localStorage.&lt;/li&gt;
      &lt;li&gt;When I start adding user sessions, I’ll revisit what states and tokens are needed, but with the way things are currently, this use of state is not needed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;retrospective-on-the-discord-oauth-implementation&quot;&gt;Retrospective on the Discord OAuth Implementation&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Researching and Planning vs Jumping In&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;When I initially set out to implement the Discord OAuth flow for logging in, I skimmed the documentation and jumped to using their &lt;strong&gt;Authorization Code Grant&lt;/strong&gt; flow. This led to constant back and forth of checking the documentation, writing code, encountering an error, checking the documentation again, then deleting the code I wrote. After spending a frustrating few hours of wondering why it wasn’t working, I decided to sit down and read through the documentation and the example that I was trying to follow. In doing so, I realized that what I was doing was only half of what I needed, and the first half of the documentation going over &lt;strong&gt;Implicit Grant&lt;/strong&gt; flow had information and code that I also needed for &lt;strong&gt;Authorization Code Grant&lt;/strong&gt; flow to work (&lt;a href=&quot;https://samau3.github.io/dev-blog/100days/2022/08/19/day1.html&quot;&gt;discussed on Day 1&lt;/a&gt;).&lt;/li&gt;
      &lt;li&gt;There are times when just jumping around the documentation and picking out code chunks that you need will work. However, this time that didn’t work for me because OAuth was a process I never worked with before. The lesson here is to try to implement documentation examples whenever possible if working with something new. Also, differentiating between entire processes (OAuth flow) and just one function (a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChartJS&lt;/code&gt; component or an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; request) will help decide how thorough the documentation should be read before starting.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p align=&quot;center&quot;&gt;
     &lt;img src=&quot;https://i.redd.it/2z08tsdqms011.jpg&quot; alt=&quot;Read documentation for a few minutes or read Stack Overflow for 2 hours&quot; width=&quot;50%&quot; /&gt;
     &lt;br /&gt;
     &lt;a href=&quot;https://www.reddit.com/r/ProgrammerHumor/comments/8myx9u/docs/&quot;&gt;
     Source
     &lt;/a&gt;
 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Getting things done vs preparing for future features&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;This one is pretty straightforward if one codes with reusability and separation of concerns in mind. However, when focused on just making sure things work to begin with, that’s when it gets unclear. While I was working on making components and routes for the Discord OAuth, I found myself not writing code and trying to plan around how to make sure my code isn’t too messy. However, without a clear idea of how it should work yet this led to going in circles about how to write something.&lt;/li&gt;
      &lt;li&gt;To overcome this, I changed my approach and started to make sure I could get code that works, and then refactor to clean up my functions and moving things out into different files. However, since I knew I had to make those changes as I was writing my code, I made it easy to pull out and separate those pieces of code. As I gain more experience reading others’ code and how to write different functions, this process will come more quickly as I can better plan out how things should be broken down earlier. I had a glimpse of that, but given my long refactoring process, there is still plenty to learn and work towards.&lt;/li&gt;
      &lt;li&gt;As I continue with this project, I imagine the refactoring process will go smoother, not necessarily faster. Especially since I have more code to refer back to on how to approach something along with my old projects. I’ll be keeping an eye on my refactoring process throughout &lt;a href=&quot;https://samau3.github.io/dev-blog/&quot;&gt;this journey&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue on with the roadmap for features to add (e.g. buy/sell stock, portfolio data, user sessions), with user session and route authorization being the next features to build on and utilize the Discord authorization.&lt;/li&gt;
  &lt;li&gt;However, the next major step will be finding a new service to host the backend server
    &lt;ul&gt;
      &lt;li&gt;Currently the app uses Heroku, but with the recent announcement that Heroku is getting rid of their free tier, I need to start looking for a replacement before expanding my backend further&lt;/li&gt;
      &lt;li&gt;At the moment, &lt;a href=&quot;https://fly.io/docs/about/pricing/#free-allowances&quot;&gt;Fly.io&lt;/a&gt; and &lt;a href=&quot;https://render.com/docs/free&quot;&gt;Render&lt;/a&gt; are looking like the next best replacement for what I wanted Heroku to do, namely hosting server and a PostgreSQL database.
        &lt;ul&gt;
          &lt;li&gt;Unfortunately, Render PostgreSQL databases are automatically deleted after 90 Days for free plans. Therefore, Fly.io is likely the service I’ll go with (pending further research into its documentation).&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader Discord OAuth Refactoring</summary></entry><entry><title type="html">9/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/08/27/day9.html" rel="alternate" type="text/html" title="9/100 Days of Code" /><published>2022-08-27T15:30:23-07:00</published><updated>2022-08-27T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/08/27/day9</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/08/27/day9.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Discord OAuth Refactoring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;More refactoring again!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Taking another look at my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useCallback&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hooks, I started to wonder if separating the function calls inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; was really necessary.
    &lt;ul&gt;
      &lt;li&gt;I looked into Stack Overflow discussions for &lt;a href=&quot;https://stackoverflow.com/questions/68172724/usecallback-vs-useeffect-in-react&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useCallback&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/57156582/should-i-wrap-all-functions-that-defined-in-component-in-usecallback&quot;&gt;when to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useCallback&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;My functions were unlikely to be reused elsewhere and they are only meant to be ran one time, which is on component mounting. Therefore, my situation doesn’t really need to utilize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useCallback&lt;/code&gt; and I can keep my functions defined within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hooks. However, I did decide to move my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generateRandomString&lt;/code&gt; function out into my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Api&lt;/code&gt; file as that doesn’t need to stay inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component. Before, my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook did look busier than necessary, but now looks much cleaner.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;//Api.ts&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PaperTraderApi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generateRandomString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;randomString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromCharCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;94&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// export PaperTraderApi&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//App.tsx&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// import PaperTraderApi&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storeCsrfTokenOnChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PaperTraderApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateRandomString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;setCsrfToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;inside effect:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;csrfToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;csrfToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Deploy the Discord OAuth login implementation (actually…?)!&lt;/li&gt;
  &lt;li&gt;Next post will likely be a retro on how this sprint went&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader Discord OAuth Refactoring</summary></entry><entry><title type="html">8/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/08/26/day8.html" rel="alternate" type="text/html" title="8/100 Days of Code" /><published>2022-08-26T15:30:23-07:00</published><updated>2022-08-26T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/08/26/day8</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/08/26/day8.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Discord OAuth Refactoring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;More refactoring!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In my useEffect hooks, I was calling functions inside of them. My friend suggested moving them out of the hook but in doing so, I can’t simply include the functions in the dependency array.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;The &apos;validateUser&apos; function makes the dependencies of useEffect Hook (at line 58) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of &apos;validateUser&apos; in its own useCallback() Hook.&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;This is due to the factor ever time the component is rendered, the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validateUser&lt;/code&gt; would have a new reference, causing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook to constantly render as it would treat &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validateUser&lt;/code&gt; as having changed. By wrapping &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validateUser&lt;/code&gt; in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useCallback&lt;/code&gt; hook, this returns a memoized function giving a stable reference to use in the dependency array of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;react-portfolio&quot;&gt;React Portfolio&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;While waiting for my friend to do a code review, I started to look into upgrading my personal website to utilize React. Below is a short collection of React websites I saw for inspiration that range from simple to &lt;em&gt;how&lt;/em&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://jessicaazchen.com/&quot;&gt;http://jessicaazchen.com/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://alisapoon.herokuapp.com/&quot;&gt;https://alisapoon.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://kulbachny.com/&quot;&gt;https://kulbachny.com/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;React Router and External Links&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Although it is possible to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Link&lt;/code&gt; component that goes to an external link, React Router is designed for in-application navigation. Therefore, in situations that an external URL needs to be accessed, a normal anchor tag or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.location&lt;/code&gt; is &lt;a href=&quot;https://stackoverflow.com/questions/42914666/react-router-external-link&quot;&gt;probably&lt;/a&gt; the way to go.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Deploy the Discord OAuth login implementation (actually)!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader Discord OAuth Refactoring</summary></entry><entry><title type="html">7/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/08/25/day7.html" rel="alternate" type="text/html" title="7/100 Days of Code" /><published>2022-08-25T15:30:23-07:00</published><updated>2022-08-25T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/08/25/day7</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/08/25/day7.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Discord OAuth Refactoring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Implemented the refactoring goals I set out yesterday, which helped clean up more components so they have better separation of concerns now!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Changed my Discord log in “button” to be an actual button.
    &lt;ul&gt;
      &lt;li&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onClick&lt;/code&gt; to call my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getDiscordOAuthCode&lt;/code&gt; function, which sets the URL to Discord API’s OAuth authorization route via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.location.href&lt;/code&gt;. Originally I tried using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt;, causing a CORS issue, but trying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.location.href&lt;/code&gt; worked without any issues.&lt;/li&gt;
      &lt;li&gt;Additionally, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getDiscordOAuthCode&lt;/code&gt;, it encodes the random string that is included as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; parameter in the OAuth route and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; parameter change in #3 below. This is necessary as there are some characters which need to be converted into a UTF-8 representation of the character in order for the URL to be valid.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Completed my incomplete CSRF prevention, so it checks if the local storage token matches the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; parameter echoed from Discord’s OAuth redirect.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Updated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; parameters in the Discord API requests to be dynamically set based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_ENV&lt;/code&gt; for server routes:&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DISCORD_REDIRECT_URI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://paper-trader-182a4.web.app/login/discord-redirect&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:3000/login/discord-redirect&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;Moved configuration variables to a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.ts&lt;/code&gt; file and server related requests to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Api.tsx&lt;/code&gt; file.
    &lt;ul&gt;
      &lt;li&gt;Now my global constant variables (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DISCORD_REDIRECT_URI&lt;/code&gt;) are all compiled in place and taken away from the components. This may not be necessary, since so far the components that I moved these values out of are still the only ones that use them. However, it does make the component files more organized if nothing else.&lt;/li&gt;
      &lt;li&gt;Since there will be more server requests for different routes once more functionality is added, such as buying stocks, I decided to move all server request functions into a class in a separate file. Here, I can organize all my server requests in one file and components can simply just import the methods as needed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BACKEND_BASE_URL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./config&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PaperTraderApi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/** Makes a request to server with Discord OAuth authorization code input
        * 
        * Returns: 
        *  &quot;discord_username&quot;
        */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getDiscordUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;discordUserData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BACKEND_BASE_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/login?code=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;discordUserData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PaperTraderApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;String vs string&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;While trying to apply a type to an input that was a string, VS Code autocompleted to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; for me. However when I checked my terminal, it showed a typescript compliation error. Researching this, I found this &lt;a href=&quot;https://stackoverflow.com/questions/14727044/what-is-the-difference-between-types-string-and-string&quot;&gt;Stack Overflow discussion&lt;/a&gt;. Put simply, one shouldn’t use the &lt;a href=&quot;https://stackoverflow.com/a/62081238&quot;&gt;capitalized types&lt;/a&gt; when working with typescript.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;encodeURIComponent vs encodeURI&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;While trying to add my generated random string as a the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; parameter for the Discord OAuth route, there would be errors when once I make the requested with the appended string. I noticed there where mismatched characters in the string and the URL, leading me to this &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent&quot;&gt;MDN article&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;However when I tried to utilize that in my files, VS Code showed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;encodeURIComponent&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;encodeURI&lt;/code&gt;, which brought me to this &lt;a href=&quot;https://stackoverflow.com/questions/4540753/should-i-use-encodeuri-or-encodeuricomponent-for-encoding-urls&quot;&gt;Stack Overflow discussion&lt;/a&gt;. Since my use case was just encoding URL components (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;encodeURIComponent&lt;/code&gt; was the clear choice.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unused &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setSearchParams&lt;/code&gt;&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Another small change I noticed was I kept writing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const [searchParams, setSearchParams] = useSearchParams();&lt;/code&gt; in my components out of habit from usiting other React hooks, even though I only needed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;searchParams&lt;/code&gt; to extract URL parameters. To try to reduce the number of typescript warnings appearing in my terminal, I tried removing the unused &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setSearchParams&lt;/code&gt; from my files and that cleared everything up. Good to know that I don’t always have to extract both values returned from React and React Router hooks.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trying to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outletContext&lt;/code&gt;&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;In my refactoring groove, I tried to reduce the number of times I had to extract the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; parameter in my components via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;searchParams.get(&apos;code&apos;)&lt;/code&gt;. Namely, the parent &lt;em&gt;Login&lt;/em&gt; component extracts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; but so does the child component &lt;em&gt;DiscordRedirect&lt;/em&gt;. Utilizing React Router’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outletContext&lt;/code&gt;, which is similar to React’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;, I made the changes. However, I realized the &lt;em&gt;DiscordRedirect&lt;/em&gt; component had to extract the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; parameter and it wouldn’t make sense for the &lt;em&gt;Login&lt;/em&gt; component to extract that as well.&lt;/li&gt;
      &lt;li&gt;So either way, the child component &lt;em&gt;DiscordRedirect&lt;/em&gt; would still have to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;searchParams&lt;/code&gt; and the extra code needed to implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outletContext&lt;/code&gt; would be unnecessary (especially with having to handle the types properly).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Deploy the Discord OAuth login implementation!&lt;/li&gt;
  &lt;li&gt;Start working on how to have the authorized user’s token/information persist across the app such that they can access protected routes without having to reauthorize every time.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader Discord OAuth Refactoring</summary></entry></feed>