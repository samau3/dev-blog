<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/dev-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/dev-blog/" rel="alternate" type="text/html" /><updated>2022-09-22T23:46:06-07:00</updated><id>http://localhost:4000/dev-blog/feed.xml</id><title type="html">100 Days of Code</title><subtitle>Sammy Au&apos;s 100 Days of Code</subtitle><entry><title type="html">35/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/22/day35.html" rel="alternate" type="text/html" title="35/100 Days of Code" /><published>2022-09-22T15:30:23-07:00</published><updated>2022-09-22T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/22/day35</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/22/day35.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Taking a step back and thinking ahead today for the next few features to implement for Paper Trader.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;React Error Handling will be next logical step after I wrap up the Express Error Handling.
    &lt;ul&gt;
      &lt;li&gt;At the moment the React client doesn’t do anything when an error is encountered except hang, so with proper error handling this should mount a fallback component and have a better user experience.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I need to draft up a Database Schema to use for once I get ready for the database
    &lt;ul&gt;
      &lt;li&gt;There will likely be two tables, one for users and one for transactions
        &lt;ul&gt;
          &lt;li&gt;The user table will be very simple, such as username (as the primary key), funds, and probably last logged in&lt;/li&gt;
          &lt;li&gt;The transaction table will have a sequential (as the primary key), stock ticker, stock name, price, and transaction date&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I will probably have to use a web scraper to get real time stock data as almost all stock APIs require a paid tier for that feature
    &lt;ul&gt;
      &lt;li&gt;Likely will use Puppeteer to stay within the JS language, but it might not be a bad idea to pick up Selenium with Python to refresh my knowledge with Python&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Draft up a database schema?&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">34/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/21/day34.html" rel="alternate" type="text/html" title="34/100 Days of Code" /><published>2022-09-21T15:30:23-07:00</published><updated>2022-09-21T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/21/day34</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/21/day34.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Implemented the change I was considering yesterday, where the error object is modified before being sent off to the error handler. These changes have a few advantages over before:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;By modifiying the error object within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; block that corresponds to the error, I can directly modify the error object without having to do any additional conditional logic on which error object needs to be modified a certain way.&lt;/li&gt;
  &lt;li&gt;With this direct error message clean up, I no longer needed to use an extra middleware or conditional logic in my error handler, reducing the overall complexity of my routes.&lt;/li&gt;
  &lt;li&gt;Now regardless of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_ENV&lt;/code&gt;, the error object has the sensitive information redacted as I removed the use of a conditional to determine when to redact the information. Since the sensitive information shouldn’t be seen easily, removing the conditional for when to redact information and just have it always redacted before being error logged is preferable. This is not necessarily a benefit specific to cleaning up the error object before being sent to the error handler, as this was a change that could have been made in the previous iterations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Hopefully wrap up this PR!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">33/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/20/day33.html" rel="alternate" type="text/html" title="33/100 Days of Code" /><published>2022-09-20T15:30:23-07:00</published><updated>2022-09-20T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/20/day33</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/20/day33.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Went through many iterations on cleaning up the error object, but everything from today and yesterday may not have been necessary…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My first major change today was adding two conditionals that would change the error object, one for Discord’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; route and one for Discord’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; route.
    &lt;ul&gt;
      &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; conditional, it would modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; property of the error response object to hid the Discord Paper Trader application’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret_code&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; conditional, it would remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bearer&lt;/code&gt; token value to prevent unauthorized access to a user’s information if the error logs were exposed&lt;/li&gt;
      &lt;li&gt;This process involved further changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExpressError&lt;/code&gt; class to account for the different properties that were being accessed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After changing making sure the conditional statements were modifying the error objects as intended, my generic error handler started to look very messy and no longer stayed true to it’s purpose of being generic.
    &lt;ul&gt;
      &lt;li&gt;So, that led me down to try to find ways to maybe pull the conditionals out of the generic handler, possible making a new middleware error handler just to modify the Discord error response object
        &lt;ul&gt;
          &lt;li&gt;The most useful resource was Express’ &lt;a href=&quot;https://expressjs.com/en/guide/error-handling.html&quot;&gt;documentaion on error handlers&lt;/a&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Based on the documentation, it was fairly straightforward to implement this new middleware to process my Discord error object:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  export function redactDiscordInfo(err: ExpressError, req: express.Request, res: express.Response, next: express.NextFunction) {
      const { headers, url, data } = err.config;

      if (process.env.NODE_ENV === &quot;production&quot;) {
          if (url === &apos;https://discord.com/api/oauth2/token&apos;) {
              const redactedData = &quot;client_id=REDACTED&amp;amp;client_secret=REDACTED&amp;amp;&quot; + `${data.substring(data.indexOf(&quot;grant_type&quot;))}`;

              err.config.data = redactedData;
          }
          if (url === &apos;https://discord.com/api/users/@me&apos;) {
              const redactAuthToken = headers.authorization.split(&quot; &quot;)[0];

              err.config.headers.authorization = redactAuthToken + &quot; REDACTED&quot;;
              err.request._header = &quot;REDACTED&quot;
          }
      }
      next(err);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, I just created a &lt;strong&gt;middleware&lt;/strong&gt;, albeit an error handling one.
    &lt;ul&gt;
      &lt;li&gt;This will be interacted with every error that is being passed on from routes calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next(error)&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;The only situations that this sensitive Discord information is being included in the request response cycle is when the application interacts with the Discord API, which is only during user log in.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Based on this limited scope of redacting the Discord information, having this redacting process be a middleware is not appropriate.
    &lt;ul&gt;
      &lt;li&gt;Which brings me to probably what I should have done at the beginning, all the way back on Day 28, when I separated the nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; block. Recognizing the fact that the two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; requests to the two different Discord routes, I should have kept the nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; as the error response objects were unique.&lt;/li&gt;
      &lt;li&gt;In addition, within each of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; blocks, I can modify the individual properties that have sensitive information before the error object is sent to the error handler.
        &lt;ul&gt;
          &lt;li&gt;This circumvents the need to have a conditional for which route the error is generated from, as the error object is being modified at the corresponding route it comes from.&lt;/li&gt;
          &lt;li&gt;Also, this reduces the size of the generic error handler as it no longer needs to have logic specific to the Discord request errors, forming a better separation of concerns.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Clean up my error object processing and wrap up the PR!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">32/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/19/day32.html" rel="alternate" type="text/html" title="32/100 Days of Code" /><published>2022-09-19T15:30:23-07:00</published><updated>2022-09-19T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/19/day32</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/19/day32.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Started trying to clean up the error object before logging, but realized it wasn’t as simple as intially thought.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Since the error is of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExpressError&lt;/code&gt; with only properties &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt;, I couldn’t access the other properties that were showing up on the error object, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headers&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;After searching around for different possible solutions on how to access these other properties, such as trying to restore the &lt;a href=&quot;https://stackoverflow.com/questions/31626231/custom-error-class-in-typescript&quot;&gt;prototype chain&lt;/a&gt;, the solution ended up being adding a new property in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExpressError&lt;/code&gt; class for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headers&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;.
        &lt;ul&gt;
          &lt;li&gt;In addition, an interface was added to access the properties within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Currently, I am now encountering an issue between the different error response objects from my existing axios requests to the Discord API.
    &lt;ul&gt;
      &lt;li&gt;The error response for getting a token and accessing a user’s information are different so I need to customize how the error object is cleaned up.&lt;/li&gt;
      &lt;li&gt;Some possible solutions will be:
        &lt;ul&gt;
          &lt;li&gt;Having a conditional based on what error is made to clean up the error object.&lt;/li&gt;
          &lt;li&gt;Reformat my route such that there is a nested try/catch so I can uniquely process the error objects.&lt;/li&gt;
          &lt;li&gt;Regardless of these changes, as I introduce more routes and functionality, my error handler will encounter different error objects and will need to be updated accordingly.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Explore the different ways to handle the error response object, possibly reaching out to my friend for suggestions&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">31/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/18/day31.html" rel="alternate" type="text/html" title="31/100 Days of Code" /><published>2022-09-18T15:30:23-07:00</published><updated>2022-09-18T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/18/day31</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/18/day31.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Following up on my research into how to log errors, I was on the right track!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Logging errors is very much necessary, but there are layers for how much should be logged.
    &lt;ul&gt;
      &lt;li&gt;In regards to my line of code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if(NODE_ENV !== test) console.error(err)&lt;/code&gt; this meant when running tests, we won’t be able to see what went wrong. Although, a test might be aiming to specifically cause an error so the logs may bury other information that is needed. Nonetheless, starting with the full logs and then iteratively cleaning up the logs will be preferable (like what will need to be done to the production level logging)&lt;/li&gt;
      &lt;li&gt;Previously, my error logs revealed sensitive information once an error was encountered in production. This was due to just having &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.error(err)&lt;/code&gt;, which logged the entire error object. While it was helpful to just get things started, this is not best practice as it’s never a good idea to reveal sensitive information in production. Applying what I saw from my online searching and discussion with my friend, it’s much better to clean up the error object and then log that.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The approach I’ll be aiming for to log my errors:
    &lt;ul&gt;
      &lt;li&gt;Have a conditional statement to see if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_ENV === production&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Build up an object inside the conditional that extracts the relevant properties from the error object
        &lt;ul&gt;
          &lt;li&gt;Headers, the data (minus sensitive information), the path, etc.&lt;/li&gt;
          &lt;li&gt;Also possiblly include the request object to see what’s being sent each time to compare between errors if needed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Log this cleaned up error object&lt;/li&gt;
      &lt;li&gt;Ultimately move this function out to a separate folder in order to keep the routes separate from data clean up logic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Some potential difficulties that I may encounter:
    &lt;ul&gt;
      &lt;li&gt;I’ll need to extract the data string and then redact pieces, leading to messy/inefficient code the first attempt&lt;/li&gt;
      &lt;li&gt;There is a reliance on the error object always being the same structure. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt;, this seems like it’ll be consistent as long as I use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios(config)&lt;/code&gt; format, but any deviations from this could led to unexpected behavior&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Start implementing better error logging!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">30/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/17/day30.html" rel="alternate" type="text/html" title="30/100 Days of Code" /><published>2022-09-17T15:30:23-07:00</published><updated>2022-09-17T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/17/day30</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/17/day30.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Received a comment on my error handler in Express about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.error(error)&lt;/code&gt; that led to more researching than actual coding, so once again &lt;strong&gt;Learnings&lt;/strong&gt; section will be the main focus.&lt;/p&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Should you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.error&lt;/code&gt; errors?
    &lt;ol&gt;
      &lt;li&gt;The benefit of logging errors, is that you can see what went wrong during the request response cycle so you can debug with more clues about the issue.&lt;/li&gt;
      &lt;li&gt;However, what information should be shown? And at what level should that be shown (development, production, test)? In addition, if you log every error, will you sift through every error that is encountered?&lt;/li&gt;
      &lt;li&gt;Still in the process of deciding how best to update my error handler to log the right information when necessary, but some good resources for error logging best practices:
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.toptal.com/nodejs/node-js-error-handling&quot;&gt;NodeJS Error Handling&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.toptal.com/express-js/routes-js-promises-error-handling&quot;&gt;Express Error Handling&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Based on what I’ve read so far among various sources, I may have to specifiy when and what to log, rather than all errors
        &lt;ul&gt;
          &lt;li&gt;Currently, I have confidential information that gets logged once an error is encountered in my axios requests. While not the end of the world since it can only be accessed from those who can view the deployed app on fly.io, there is still a risk of logging the entire error object.&lt;/li&gt;
          &lt;li&gt;Perhaps setting the logging to only occur during &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_ENV === &apos;test&apos;&lt;/code&gt; or only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error.response.headers&lt;/code&gt;? Things to consider during more discussions with my friend.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Work through the code review comment!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">29/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/16/day29.html" rel="alternate" type="text/html" title="29/100 Days of Code" /><published>2022-09-16T15:30:23-07:00</published><updated>2022-09-16T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/16/day29</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/16/day29.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Most of today was spent looking into how to handle errors in React properly. So most of today’s entry will be in the &lt;strong&gt;Learning&lt;/strong&gt; sessions&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Opened a PR for the Express Error changes, and one small change so far was having a generic message if there’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;500&lt;/code&gt; error (see learnings).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;What message to provide for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;500&lt;/code&gt; Errors?
    &lt;ul&gt;
      &lt;li&gt;Originally I had my error handling route with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const message = err.message&lt;/code&gt;, but this runs into the risk of showing too much information from the server.&lt;/li&gt;
      &lt;li&gt;Based on this &lt;a href=&quot;https://stackoverflow.com/questions/72208536/whats-the-best-practice-for-returning-an-http-500-error-description&quot;&gt;SO discussion&lt;/a&gt;, the best thing to do is just have a generic message shown to the client.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;React Error Handling
    &lt;ul&gt;
      &lt;li&gt;In the past, I handled error information by utilizing a Bootstrap Alert, which Evergreen UI also has a &lt;a href=&quot;https://evergreen.segment.com/components/alert&quot;&gt;component&lt;/a&gt; for.&lt;/li&gt;
      &lt;li&gt;However, looking into best practices, there are &lt;a href=&quot;https://reactjs.org/docs/error-boundaries.html&quot;&gt;Error Boundaries&lt;/a&gt; in React that allows the use of a fallback component to load if there was an error with a component.
        &lt;ul&gt;
          &lt;li&gt;For my login function not working, such as when the server responds with an error, this may be what I need to use to show that the user needs to try logging in again.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Another potential solution is utilizing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; block, but that may be messier than &lt;a href=&quot;https://reactjs.org/docs/error-boundaries.html&quot;&gt;using Error Boundaries&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Work through the code review comments&lt;/li&gt;
  &lt;li&gt;Start adding React error handling&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">28/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/15/day28.html" rel="alternate" type="text/html" title="28/100 Days of Code" /><published>2022-09-15T15:30:23-07:00</published><updated>2022-09-15T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/15/day28</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/15/day28.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Started adding error classes and error routes, which is leading up to a need for refactoring soon.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I made some custom error classes, which extended from an extention of Express’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error&lt;/code&gt; class.
    &lt;ul&gt;
      &lt;li&gt;However, when I tried to create a new property for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt;, I found that led to type errors that stated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property &apos;status&apos; does not exist on type &apos;ExpressError&apos;.&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Searching up “adding status to express errors typescript” online led to different solutions that didn’t quite match what I was doing. Luckily, the solution was just adding that as a property before the constructor:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; export class ExpressError extends Error {
  status: number; // add this line so I can use this.status in the constructor

  constructor(message: string, status: number) {
      super();
      this.message = message;
      this.status = status;
  }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;While trying to add error handling routes, I found that requests being made to the Discord API already had their own error status and messages. So rather than overriding them, I figured I should just extract those properties from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt; object.
    &lt;ul&gt;
      &lt;li&gt;Previously, I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios.post(url[, data[, config]])&lt;/code&gt; to makes requests to the Discord OAuth token route instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios(config)&lt;/code&gt; as I couldn’t properly send the URL parameters with the latter approach. However, I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios(config)&lt;/code&gt; to make a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; request to the Discord Users route.&lt;/li&gt;
      &lt;li&gt;The problem with this mixing of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; request format meant that the error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt; object was different between them, so I couldn’t use the same error handler to process them. Even if I were to change my Discord Users route &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; request to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios.get(url[, config])&lt;/code&gt;, the response object would still be different between the two requests.&lt;/li&gt;
      &lt;li&gt;To try to get both error objects to be sent to the error handler with all the properties I need having defined values, I wrapped the requests in a nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; block, so each request will have it’s own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; that is cleaned up to send to the error handler
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; try {
  axios.post() to token route

  try {
      axios.get() to user route
  } catch (e) {
      // clean up e
      next(e)
  }
 } catch (e) {
  // clean up e
  next(e)
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Despite this working, I felt that there had to be a way to make it so I didn’t have deal with two separate response error objects since this was very messy.
    &lt;ul&gt;
      &lt;li&gt;With some more digging and trial and error, I finally managed to change my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios.post(url[, data[, config]])&lt;/code&gt; to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios(config)&lt;/code&gt; format!&lt;/li&gt;
      &lt;li&gt;I’m pretty sure I tried this before when first working with the Discord OAuth API, but maybe I was using the wrong key in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; body. Anyways, the solution was to append the key value pairs as a single query parameter:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; try {
  const params = new URLSearchParams();
  params.append(&apos;client_id&apos;, clientId);
  // ... other params that need to be appended

  tokenResponseData = await axios({
  method: &apos;POST&apos;,
  url: &apos;https://discord.com/api/oauth2/token&apos;,
  data: params,
  headers: {
      &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;
  },
  });
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Once I confirmed this worked, I changed my request to the Discord Users route back into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios(config)&lt;/code&gt; format. By doing it this way, I no longer needed to have a nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; block that modified different error objects and could just have one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; block that had the same error object to modify (specifically, to extract the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error.data.error_description&lt;/code&gt; value and store it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error.message&lt;/code&gt;).
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; try {
  // params constructing
  axios(POST_TO_TOKEN)
        
  // manipulating returned token response object

  axios(GET_USER_WITH_TOKEN)

  // return json to React FE
 } catch (e) {
  // store error message in error object
  next(e)
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implements&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;While looking into how to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; property to my custom error class, I encountered this &lt;a href=&quot;https://stackoverflow.com/questions/38834625/whats-the-difference-between-extends-and-implements-in-typescript&quot;&gt;discussion&lt;/a&gt; as I saw some approaches related to my issue using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implements&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;A very thorough explanation about the two, but just for quick reference:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends&lt;/code&gt; is the concept of inheritance in OOP&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implements&lt;/code&gt; is the concept of polymorphism in OOP&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Also from my search in how to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; property to my custom error class, I encounted some discussions that used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; in their classes. I’ve only ever used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; so I was surprised what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; would be for&lt;/li&gt;
      &lt;li&gt;Taking a look into this &lt;a href=&quot;https://www.tutorialsteacher.com/typescript/data-modifiers&quot;&gt;resource&lt;/a&gt;, Typescript by default has variables in classes be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; so I don’t have to declare that in my class.&lt;/li&gt;
      &lt;li&gt;In my custom error class, I originally tried to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static status: number&lt;/code&gt; but had to change that to just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status: number&lt;/code&gt; in order to resolve the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property &apos;status&apos; does not exist on type &apos;ExpressError&apos;.&lt;/code&gt; error I encountered. After checking the difference between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; that makes sense why I doing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this.status&lt;/code&gt; in my constructor led to that “does not exist” error since it couldn’t be accessed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Nested try catch blocks or separate?
    &lt;ul&gt;
      &lt;li&gt;After changing my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; requests to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios(config)&lt;/code&gt; format, I started to wonder if the nested try catch was really necessary. Although the two requests would be returning different errors, I’d need the user to generate a new token anyways and restart the OAuth process.&lt;/li&gt;
      &lt;li&gt;This led me to two discussions, one specifically in &lt;a href=&quot;https://stackoverflow.com/a/59944868&quot;&gt;NodeJS&lt;/a&gt; and another in &lt;a href=&quot;https://stackoverflow.com/questions/25973515/to-separate-or-not-to-separate-try-catch-blocks-best-practice&quot;&gt;PhP&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;The key take away is if I needed to process the error responses uniquely and if I wanted the operations to be tied together - then I should use a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; block. Given my use case, I got rid of the nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; in favor of a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Open up a PR for code review&lt;/li&gt;
  &lt;li&gt;Start on the error handling for the React side of things&lt;/li&gt;
  &lt;li&gt;Current running list of PRs to work on:
    &lt;ol&gt;
      &lt;li&gt;React Error handling&lt;/li&gt;
      &lt;li&gt;Reformat all files to have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; tab spacing&lt;/li&gt;
      &lt;li&gt;Refactor Express routes so it’s not in one giant file&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">27/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/14/day27.html" rel="alternate" type="text/html" title="27/100 Days of Code" /><published>2022-09-14T15:30:23-07:00</published><updated>2022-09-14T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/14/day27</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/14/day27.html">&lt;h3 id=&quot;flyio-issues&quot;&gt;Fly.io Issues&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;While working on the logout PR and recently the login spinner PR, I noticed there is inconsistent deployment behavior.
    &lt;ol&gt;
      &lt;li&gt;When I opened the PRs for the two features, the Github action to deploy to fly.io fail, despite working previously and having no changes to the configuration settings to deploy. However, once I make a commit to the PR and the Github action runs again, it successfully deploys. No idea what’s going on here, other than recognizing this behavior as very odd.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;paper-trader-logout-function-and-corresponding-retrospective&quot;&gt;Paper Trader Logout Function And Corresponding Retrospective&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Going back to my decision between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, and how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage&lt;/code&gt;’s functional interface returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;, I figured I’d be using both in the app. However, my friend suggested just setting the values for the variables and functions that rely on the result from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage&lt;/code&gt;’s functional interface to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, which would resolve issues deciding between if I should be checking a value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;. So I made a few changes from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage.getItem()&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage.getItem() ?? undefined&lt;/code&gt; across my components.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Merged the logout function PR to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;! Excited to have this implemented as that helps with trying out features with and without user session without having to manually clearing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage&lt;/code&gt; in the Chrome console. This feature was pretty small to implement so there isn’t much to reflect on. However, something that bleeds over from the previous retrospective was how to handle merge conflicts after merging a big PR to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. The logout function was started before I merged the user session PR, so once I went back to working on the feature, I needed to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge origin main&lt;/code&gt; to update the branch. Luckily, the merge conflicts were easy to resolve since I wanted to accept almost all the incoming changes, where the only hard part was finding all the merge conflicts (VS Code’s UI helped with most of this process though). If I was further along in the logout feature branch, then there might be some merge conflicts that would have been harder to resolve. Overall, this experience showed the importance of breaking things down and to keep the goal in mind so one doesn’t constantly expand a feature to the point where it becomes too complex too soon.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Worked on the login loading spinner feature today, keeping the PR small so there was only about ~10 net line changes. Should be a simple PR to merge to main, so I won’t need a retrospective for that feature.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Nullish operator (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;??&lt;/code&gt;) vs Or operator (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;||&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;I’m not too familiar with the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;??&lt;/code&gt; that my friend was suggesting in the code reviews so I took a deeper look about when and why one should use them.&lt;/li&gt;
      &lt;li&gt;Some resources I saw were this &lt;a href=&quot;https://stackoverflow.com/questions/61480993/when-should-i-use-nullish-coalescing-vs-logical-or&quot;&gt;SO discussion&lt;/a&gt; and the &lt;a href=&quot;https://stackoverflow.com/questions/61480993/when-should-i-use-nullish-coalescing-vs-logical-or&quot;&gt;official proposal to add the feature to Javascript&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Some key points are:
        &lt;ol&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;||&lt;/code&gt; can return potentially unwanted results due to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;falsey&lt;/code&gt; values being on the left side, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;??&lt;/code&gt; differentiates between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;falsey&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nullish&lt;/code&gt; values, so the operator only returns values on the right side if the left side was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;A quick reminder/explanation is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;||&lt;/code&gt; returns the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;truthy&lt;/code&gt; value, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;??&lt;/code&gt; returns the first defined value.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;At the moment, a lot of the situations where I’m using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;||&lt;/code&gt; should actually be replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;??&lt;/code&gt; as I’m supplying a default value if the variable would otherwise be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Merge this PR and start on making Error classes!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Fly.io Issues</summary></entry><entry><title type="html">26/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/13/day26.html" rel="alternate" type="text/html" title="26/100 Days of Code" /><published>2022-09-13T15:30:23-07:00</published><updated>2022-09-13T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/13/day26</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/13/day26.html">&lt;h3 id=&quot;flyio-issues&quot;&gt;Fly.io Issues&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Might have to abandon debugging the deployment issues as I’m not really making much progress on solving the issue.
    &lt;ol&gt;
      &lt;li&gt;My current assumption is there’s caching of the deployment files so when I deploy, it’s not applying any changes. I tried running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; in case deploying somehow uses my local build files, but that didn’t have any changes on the deployment either.&lt;/li&gt;
      &lt;li&gt;Another assumption that I’ll have to look into in the future is potentially an error with the build command not running. Some brief searching online for the error I receive in my Github action showed that this could be related to build.
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://community.fly.io/t/nodejs-failed-due-to-unhealthy-allocations/5013/2&quot;&gt;A fly.io community post about a similar issue&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/70495483/node-js-only-resolving-dist-index-js-other-files-in-module-are-not-found&quot;&gt;A more generic SO discussion about the Error message I see in the Github action logs&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Opened my PR for the logout function!
    &lt;ul&gt;
      &lt;li&gt;Not too many changes from yesterday, but I did manage to find out how to set the active &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tab&lt;/code&gt; to be highlighted.
        &lt;ul&gt;
          &lt;li&gt;With Evergreen UI, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tab&lt;/code&gt; component has a property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isSelected&lt;/code&gt; that is a boolean which determines if it’s active and should be highlighted.&lt;/li&gt;
          &lt;li&gt;Pair that with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-router-dom&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useLocation&lt;/code&gt; hook, I just need to compare if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pathname&lt;/code&gt; property from the returned object of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useLocation&lt;/code&gt; matches the path corresponding to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tab&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;There may be a way to apply these changes more dynamically as everything is hard coded, but for now since the file is small this is tolerable.
        &lt;ul&gt;
          &lt;li&gt;I may revisit the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array.map&lt;/code&gt; to have the tabs be dynamically set, but the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logout&lt;/code&gt; tab would have to be excluded from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; callback as it won’t have the same properties as the other tabs.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Apply changes that may come in from the code review of my PR.&lt;/li&gt;
  &lt;li&gt;A retrospective, which will likely be pretty brief.&lt;/li&gt;
  &lt;li&gt;Start working on the login redirect spinner.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Fly.io Issues</summary></entry></feed>