<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/dev-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/dev-blog/" rel="alternate" type="text/html" /><updated>2022-09-28T23:48:48-07:00</updated><id>http://localhost:4000/dev-blog/feed.xml</id><title type="html">100 Days of Code</title><subtitle>Sammy Au&apos;s 100 Days of Code</subtitle><entry><title type="html">39/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/28/day39.html" rel="alternate" type="text/html" title="39/100 Days of Code" /><published>2022-09-28T15:30:23-07:00</published><updated>2022-09-28T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/28/day39</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/28/day39.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Recieved some feedback on my previously opened PR, luckily mostly minor changes!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Added typing to the variables that store the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; response values.
    &lt;ul&gt;
      &lt;li&gt;In this process, realized that I haven’t been storing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response.data&lt;/code&gt; and was doing this step separately.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const var1 = await axios()&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const var2 = var1.data&lt;/code&gt; changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const var1 = (await axios()).data&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Made some minor refactoring to reduce the unnecessary variables.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Changed my login request route to fail fast by checking if the parameter is missing rather than checking if it exists.
    &lt;ul&gt;
      &lt;li&gt;Used to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (code)&lt;/code&gt; but is not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (!code) return next(new BadRequestError())&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also worked on the React error side of things and got a better understanding of where errors should be thrown&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Previously, my class methods that made the requests to my server had &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; blocks that threw errors.&lt;/li&gt;
  &lt;li&gt;Made the change such that the React hook that makes that calls the methods to be wrapped in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;At the moment, this method is called at the parent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component, but I wanted the errors to be within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component.
    &lt;ul&gt;
      &lt;li&gt;Doesn’t seem like passing the errors down to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component is the correct approach as it lifts the error state too high in my opinion.&lt;/li&gt;
      &lt;li&gt;Will need to keep exploring to see if there’s a better approach.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Try to see if having separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; blocks is a possible alternative to the nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; blocks
    &lt;ul&gt;
      &lt;li&gt;Previously, the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; failing still allowed the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; to be ran
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/token&lt;/code&gt; request fails, but a request is still made to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users&lt;/code&gt; without an access token&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">38/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/27/day38.html" rel="alternate" type="text/html" title="38/100 Days of Code" /><published>2022-09-27T15:30:23-07:00</published><updated>2022-09-27T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/27/day38</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/27/day38.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Started working on handling errors in React
    &lt;ul&gt;
      &lt;li&gt;Originally I thought I’d need to use React Error Boundaries, but that doesn’t seem to be necessary? Though I did see someone use it as a &lt;a href=&quot;https://stackoverflow.com/a/50220675&quot;&gt;solution&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;At the moment, errors are being created from my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; calls to the server for Discord OAuth.
    &lt;ul&gt;
      &lt;li&gt;My actual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; calls that I stored as methods on my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserSession&lt;/code&gt; class utilize try/catch which throws an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error&lt;/code&gt; in the catch block.&lt;/li&gt;
      &lt;li&gt;However, these throws show up in the console and doesn’t trigger my try/catch blocks in my React components.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I’ll need to tinker around some more to figure out where to properly throw these errors, or if I have to utilize the Error Boundaries.
    &lt;ul&gt;
      &lt;li&gt;The problem I see with utilizing the Error Boundaries is that will likely lead to massive refactoring of my components which may not be neccessary?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue researching what’s the best way to handle displaying errors on the React side.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">37/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/24/day37.html" rel="alternate" type="text/html" title="37/100 Days of Code" /><published>2022-09-24T15:30:23-07:00</published><updated>2022-09-24T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/24/day37</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/24/day37.html">&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;
&lt;p&gt;Leetcode 57. Insert Interval&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If the end of the newInterval is less than the start value of the current interval, there is no overlap
    &lt;ul&gt;
      &lt;li&gt;That means we add it to the result array and then add the remaining intervals after the current one&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If the start of the new array is greater than the end of the current array, then that means there is no overlap&lt;/li&gt;
  &lt;li&gt;If there is an overlap, update the newInterval that will be inserted with the minimum between the start values and the max between the end values&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
var insert = function (intervals, newInterval) {
    // initialize an empty array to build up with the new intervals
    let res = [];

    // iterate through the intervals
    for (let i = 0; i &amp;lt; intervals.length; i++) {
        // if the end of the newInterval is less than the start value of the current interval, there is no overlap
        // and that means we add it to the result array and then add the remaining intervals after the current one
        // note the use of slice, as if we built an newInterval due to overlap in previous loops, we want to exclude those
        if (newInterval[1] &amp;lt; intervals[i][0]) {
            res.push(newInterval, ...intervals.slice(i));
            return res;
        }
        // else if the start of the new array is greater than the end of the current array, then that means there is no overlap
        // and we just add the current array to the result array and continue looping
        else if (newInterval[0] &amp;gt; intervals[i][1]) {
            res.push(intervals[i]);
        }
        // if there is an overlap, update the newInterval that will be inserted with the minimum between the start values
        // and the max between the end values
        else {
            newInterval = [(Math.min(newInterval[0], intervals[i][0])), Math.max(newInterval[1], intervals[i][1])];
        }
    }

    // note that we have not pushed the newInterval once we&apos;re out of the loop as the first if condition doesn&apos;t trigger
    // so we need to add it back
    res.push(newInterval);
    return res;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Leetcode Leetcode 57. Insert Interval</summary></entry><entry><title type="html">36/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/23/day36.html" rel="alternate" type="text/html" title="36/100 Days of Code" /><published>2022-09-23T15:30:23-07:00</published><updated>2022-09-23T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/23/day36</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/23/day36.html">&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;

&lt;p&gt;Leetcode 56. Merge Intervals&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First need to sort the array by the first element in each interval&lt;/li&gt;
  &lt;li&gt;Then interate through the sorted intervals, building up a merged interval
    &lt;ol&gt;
      &lt;li&gt;If the start of the next interval is less than the end of the previous interval, they’re overlapping
        &lt;ul&gt;
          &lt;li&gt;Replace the previous interval’s end number with the greater of the current and existing end value&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;If they’re not overlapping, then no change is made and update the previous interval to be the current interval&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const merge = function(intervals) {
     intervals.sort((a, b) =&amp;gt; a[0] - b[0])
    // console.log(intervals)
    
    let prev = intervals[0];
    let merged = [prev];
    for (let curr of intervals) {
        if (curr[0] &amp;lt;= prev[1]) {
            prev[1] = prev[1] &amp;gt; curr[1] ? prev[1] : curr[1];
        } else {
            merged.push(curr);
            prev = curr;
        }
    }
    
    return merged;
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Leetcode</summary></entry><entry><title type="html">35/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/22/day35.html" rel="alternate" type="text/html" title="35/100 Days of Code" /><published>2022-09-22T15:30:23-07:00</published><updated>2022-09-22T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/22/day35</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/22/day35.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Taking a step back and thinking ahead today for the next few features to implement for Paper Trader.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;React Error Handling will be next logical step after I wrap up the Express Error Handling.
    &lt;ul&gt;
      &lt;li&gt;At the moment the React client doesn’t do anything when an error is encountered except hang, so with proper error handling this should mount a fallback component and have a better user experience.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I need to draft up a Database Schema to use for once I get ready for the database
    &lt;ul&gt;
      &lt;li&gt;There will likely be two tables, one for users and one for transactions
        &lt;ul&gt;
          &lt;li&gt;The user table will be very simple, such as username (as the primary key), funds, and probably last logged in&lt;/li&gt;
          &lt;li&gt;The transaction table will have a sequential (as the primary key), stock ticker, stock name, price, and transaction date&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I will probably have to use a web scraper to get real time stock data as almost all stock APIs require a paid tier for that feature
    &lt;ul&gt;
      &lt;li&gt;Likely will use Puppeteer to stay within the JS language, but it might not be a bad idea to pick up Selenium with Python to refresh my knowledge with Python&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Draft up a database schema?&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">34/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/21/day34.html" rel="alternate" type="text/html" title="34/100 Days of Code" /><published>2022-09-21T15:30:23-07:00</published><updated>2022-09-21T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/21/day34</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/21/day34.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Implemented the change I was considering yesterday, where the error object is modified before being sent off to the error handler. These changes have a few advantages over before:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;By modifiying the error object within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; block that corresponds to the error, I can directly modify the error object without having to do any additional conditional logic on which error object needs to be modified a certain way.&lt;/li&gt;
  &lt;li&gt;With this direct error message clean up, I no longer needed to use an extra middleware or conditional logic in my error handler, reducing the overall complexity of my routes.&lt;/li&gt;
  &lt;li&gt;Now regardless of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_ENV&lt;/code&gt;, the error object has the sensitive information redacted as I removed the use of a conditional to determine when to redact the information. Since the sensitive information shouldn’t be seen easily, removing the conditional for when to redact information and just have it always redacted before being error logged is preferable. This is not necessarily a benefit specific to cleaning up the error object before being sent to the error handler, as this was a change that could have been made in the previous iterations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Hopefully wrap up this PR!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">33/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/20/day33.html" rel="alternate" type="text/html" title="33/100 Days of Code" /><published>2022-09-20T15:30:23-07:00</published><updated>2022-09-20T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/20/day33</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/20/day33.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Went through many iterations on cleaning up the error object, but everything from today and yesterday may not have been necessary…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My first major change today was adding two conditionals that would change the error object, one for Discord’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; route and one for Discord’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; route.
    &lt;ul&gt;
      &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; conditional, it would modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; property of the error response object to hid the Discord Paper Trader application’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret_code&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; conditional, it would remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bearer&lt;/code&gt; token value to prevent unauthorized access to a user’s information if the error logs were exposed&lt;/li&gt;
      &lt;li&gt;This process involved further changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExpressError&lt;/code&gt; class to account for the different properties that were being accessed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After changing making sure the conditional statements were modifying the error objects as intended, my generic error handler started to look very messy and no longer stayed true to it’s purpose of being generic.
    &lt;ul&gt;
      &lt;li&gt;So, that led me down to try to find ways to maybe pull the conditionals out of the generic handler, possible making a new middleware error handler just to modify the Discord error response object
        &lt;ul&gt;
          &lt;li&gt;The most useful resource was Express’ &lt;a href=&quot;https://expressjs.com/en/guide/error-handling.html&quot;&gt;documentaion on error handlers&lt;/a&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Based on the documentation, it was fairly straightforward to implement this new middleware to process my Discord error object:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  export function redactDiscordInfo(err: ExpressError, req: express.Request, res: express.Response, next: express.NextFunction) {
      const { headers, url, data } = err.config;

      if (process.env.NODE_ENV === &quot;production&quot;) {
          if (url === &apos;https://discord.com/api/oauth2/token&apos;) {
              const redactedData = &quot;client_id=REDACTED&amp;amp;client_secret=REDACTED&amp;amp;&quot; + `${data.substring(data.indexOf(&quot;grant_type&quot;))}`;

              err.config.data = redactedData;
          }
          if (url === &apos;https://discord.com/api/users/@me&apos;) {
              const redactAuthToken = headers.authorization.split(&quot; &quot;)[0];

              err.config.headers.authorization = redactAuthToken + &quot; REDACTED&quot;;
              err.request._header = &quot;REDACTED&quot;
          }
      }
      next(err);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, I just created a &lt;strong&gt;middleware&lt;/strong&gt;, albeit an error handling one.
    &lt;ul&gt;
      &lt;li&gt;This will be interacted with every error that is being passed on from routes calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next(error)&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;The only situations that this sensitive Discord information is being included in the request response cycle is when the application interacts with the Discord API, which is only during user log in.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Based on this limited scope of redacting the Discord information, having this redacting process be a middleware is not appropriate.
    &lt;ul&gt;
      &lt;li&gt;Which brings me to probably what I should have done at the beginning, all the way back on Day 28, when I separated the nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; block. Recognizing the fact that the two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; requests to the two different Discord routes, I should have kept the nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; as the error response objects were unique.&lt;/li&gt;
      &lt;li&gt;In addition, within each of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; blocks, I can modify the individual properties that have sensitive information before the error object is sent to the error handler.
        &lt;ul&gt;
          &lt;li&gt;This circumvents the need to have a conditional for which route the error is generated from, as the error object is being modified at the corresponding route it comes from.&lt;/li&gt;
          &lt;li&gt;Also, this reduces the size of the generic error handler as it no longer needs to have logic specific to the Discord request errors, forming a better separation of concerns.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Clean up my error object processing and wrap up the PR!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">32/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/19/day32.html" rel="alternate" type="text/html" title="32/100 Days of Code" /><published>2022-09-19T15:30:23-07:00</published><updated>2022-09-19T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/19/day32</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/19/day32.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Started trying to clean up the error object before logging, but realized it wasn’t as simple as intially thought.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Since the error is of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExpressError&lt;/code&gt; with only properties &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt;, I couldn’t access the other properties that were showing up on the error object, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headers&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;After searching around for different possible solutions on how to access these other properties, such as trying to restore the &lt;a href=&quot;https://stackoverflow.com/questions/31626231/custom-error-class-in-typescript&quot;&gt;prototype chain&lt;/a&gt;, the solution ended up being adding a new property in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExpressError&lt;/code&gt; class for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headers&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;.
        &lt;ul&gt;
          &lt;li&gt;In addition, an interface was added to access the properties within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Currently, I am now encountering an issue between the different error response objects from my existing axios requests to the Discord API.
    &lt;ul&gt;
      &lt;li&gt;The error response for getting a token and accessing a user’s information are different so I need to customize how the error object is cleaned up.&lt;/li&gt;
      &lt;li&gt;Some possible solutions will be:
        &lt;ul&gt;
          &lt;li&gt;Having a conditional based on what error is made to clean up the error object.&lt;/li&gt;
          &lt;li&gt;Reformat my route such that there is a nested try/catch so I can uniquely process the error objects.&lt;/li&gt;
          &lt;li&gt;Regardless of these changes, as I introduce more routes and functionality, my error handler will encounter different error objects and will need to be updated accordingly.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Explore the different ways to handle the error response object, possibly reaching out to my friend for suggestions&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">31/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/18/day31.html" rel="alternate" type="text/html" title="31/100 Days of Code" /><published>2022-09-18T15:30:23-07:00</published><updated>2022-09-18T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/18/day31</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/18/day31.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Following up on my research into how to log errors, I was on the right track!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Logging errors is very much necessary, but there are layers for how much should be logged.
    &lt;ul&gt;
      &lt;li&gt;In regards to my line of code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if(NODE_ENV !== test) console.error(err)&lt;/code&gt; this meant when running tests, we won’t be able to see what went wrong. Although, a test might be aiming to specifically cause an error so the logs may bury other information that is needed. Nonetheless, starting with the full logs and then iteratively cleaning up the logs will be preferable (like what will need to be done to the production level logging)&lt;/li&gt;
      &lt;li&gt;Previously, my error logs revealed sensitive information once an error was encountered in production. This was due to just having &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.error(err)&lt;/code&gt;, which logged the entire error object. While it was helpful to just get things started, this is not best practice as it’s never a good idea to reveal sensitive information in production. Applying what I saw from my online searching and discussion with my friend, it’s much better to clean up the error object and then log that.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The approach I’ll be aiming for to log my errors:
    &lt;ul&gt;
      &lt;li&gt;Have a conditional statement to see if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_ENV === production&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Build up an object inside the conditional that extracts the relevant properties from the error object
        &lt;ul&gt;
          &lt;li&gt;Headers, the data (minus sensitive information), the path, etc.&lt;/li&gt;
          &lt;li&gt;Also possiblly include the request object to see what’s being sent each time to compare between errors if needed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Log this cleaned up error object&lt;/li&gt;
      &lt;li&gt;Ultimately move this function out to a separate folder in order to keep the routes separate from data clean up logic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Some potential difficulties that I may encounter:
    &lt;ul&gt;
      &lt;li&gt;I’ll need to extract the data string and then redact pieces, leading to messy/inefficient code the first attempt&lt;/li&gt;
      &lt;li&gt;There is a reliance on the error object always being the same structure. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt;, this seems like it’ll be consistent as long as I use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios(config)&lt;/code&gt; format, but any deviations from this could led to unexpected behavior&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Start implementing better error logging!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">30/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/17/day30.html" rel="alternate" type="text/html" title="30/100 Days of Code" /><published>2022-09-17T15:30:23-07:00</published><updated>2022-09-17T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/17/day30</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/17/day30.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Received a comment on my error handler in Express about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.error(error)&lt;/code&gt; that led to more researching than actual coding, so once again &lt;strong&gt;Learnings&lt;/strong&gt; section will be the main focus.&lt;/p&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Should you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.error&lt;/code&gt; errors?
    &lt;ol&gt;
      &lt;li&gt;The benefit of logging errors, is that you can see what went wrong during the request response cycle so you can debug with more clues about the issue.&lt;/li&gt;
      &lt;li&gt;However, what information should be shown? And at what level should that be shown (development, production, test)? In addition, if you log every error, will you sift through every error that is encountered?&lt;/li&gt;
      &lt;li&gt;Still in the process of deciding how best to update my error handler to log the right information when necessary, but some good resources for error logging best practices:
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.toptal.com/nodejs/node-js-error-handling&quot;&gt;NodeJS Error Handling&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.toptal.com/express-js/routes-js-promises-error-handling&quot;&gt;Express Error Handling&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Based on what I’ve read so far among various sources, I may have to specifiy when and what to log, rather than all errors
        &lt;ul&gt;
          &lt;li&gt;Currently, I have confidential information that gets logged once an error is encountered in my axios requests. While not the end of the world since it can only be accessed from those who can view the deployed app on fly.io, there is still a risk of logging the entire error object.&lt;/li&gt;
          &lt;li&gt;Perhaps setting the logging to only occur during &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_ENV === &apos;test&apos;&lt;/code&gt; or only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error.response.headers&lt;/code&gt;? Things to consider during more discussions with my friend.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Work through the code review comment!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry></feed>