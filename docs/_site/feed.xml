<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/dev-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/dev-blog/" rel="alternate" type="text/html" /><updated>2022-10-15T23:55:37-07:00</updated><id>http://localhost:4000/dev-blog/feed.xml</id><title type="html">100 Days of Code</title><subtitle>Sammy Au&apos;s 100 Days of Code</subtitle><entry><title type="html">54/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/15/day54.html" rel="alternate" type="text/html" title="54/100 Days of Code" /><published>2022-10-15T15:30:23-07:00</published><updated>2022-10-15T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/15/day54</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/15/day54.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Explored trying to implement React Error Boundaries.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For the most part, React Error Boundaries are exactly what I wanted.
    &lt;ul&gt;
      &lt;li&gt;I’m able to unmount my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; component via calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logout&lt;/code&gt; and display a new component to the user so they won’t stay on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; page anymore.&lt;/li&gt;
      &lt;li&gt;Plus there was a &lt;a href=&quot;https://www.npmjs.com/package/react-error-boundary?activeTab=dependencies&quot;&gt;library&lt;/a&gt; that I could use so I didn’t have to write my own class components to make the Error Boundary.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, the situations that trigger the Error Boundary are not rendering errors with the component, but an asynchronous server request.
    &lt;ul&gt;
      &lt;li&gt;This is important as the React documentation specifically say this won’t work for the following situations:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Error boundaries do not catch errors for:

  - Event handlers (learn more)
  - Asynchronous code (e.g. setTimeout or requestAnimationFrame callbacks)
  - Server side rendering
  - Errors thrown in the error boundary itself (rather than its children)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;Which is why I didn’t use them before for my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;There was a blog post that mentioned a possible way to overcome this issue by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useErrorHandler&lt;/code&gt; hook from the library, which led to my Error Boundary implementation to work.
    &lt;ul&gt;
      &lt;li&gt;But it’s still not the perfect solution as it’s built on the React’s Error Boundary, so this means the errors caused by the above issues are not caught (which is my case).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, this was not all wasted efforts as ideally I’ll be using a mix of both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/catch&lt;/code&gt; and Error Boundaries. Just that for this situation, I’ll probably have to stick to using try/catch.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;The next option I’ll try to explore will be passing an error message to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component after being redirected from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; component.
    &lt;ul&gt;
      &lt;li&gt;I started to play around with it already, but haven’t been able to successfully pass an error message yet.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">53/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/14/day53.html" rel="alternate" type="text/html" title="53/100 Days of Code" /><published>2022-10-14T15:30:23-07:00</published><updated>2022-10-14T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/14/day53</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/14/day53.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;More or less finished making the small tweaks to my client to handle the changes in JWT and request return objects. However, while trying to figure out how to properly handle errors for my Profile page, I realized I can’t quite do what I did for my Login page component.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For my Profile page there are three error situations I’m aware of:
    &lt;ol&gt;
      &lt;li&gt;Backend server is down
        &lt;ul&gt;
          &lt;li&gt;Quick solution is to just logout/clear the user session and redirect to login&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Database is down
        &lt;ul&gt;
          &lt;li&gt;Display an error, but don’t need to log user out or redirect&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Database can’t find user (e.g. dropped database between user sessions)
        &lt;ul&gt;
          &lt;li&gt;Display an error, logout/redirect the user&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;The last error situations I can’t use the same error handling as before as once I call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logout&lt;/code&gt; function, then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; component is unmounted.
    &lt;ul&gt;
      &lt;li&gt;This causes an issue with trying to update state on an unmounted component, prompting a React warning about memory leaking&lt;/li&gt;
      &lt;li&gt;Since logout leads to a redirect, there isn’t an easy way to pass the error messages to the login component.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This leads me to having to explore possibly implementing React Error Boundaries and changing how I’ve previously handled errors before too.
    &lt;ul&gt;
      &lt;li&gt;Some options I saw were to create my own Error Boundary or utilize a &lt;a href=&quot;https://www.npmjs.com/package/react-error-boundary#useerrorhandlererror-error&quot;&gt;library&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;

&lt;p&gt;Strangely, my Firebase Github Action suddenly started to fail again.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The error mentioned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resource not accessible by integration&lt;/code&gt;, but my previous Github Actions had that message before without breaking anything.
    &lt;ul&gt;
      &lt;li&gt;To resolve this, I had to change the &lt;a href=&quot;https://lightrun.com/answers/firebaseextended-action-hosting-deploy-bug-unhandledpromiserejectionwarning-httperror-resource-not-accessible-by-integration&quot;&gt;workflow permissions&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Then all of a sudden I had an error saying that the action couldn’t find my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firebase.json&lt;/code&gt; and there was now a new check called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy Preview&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;This meant my previous actions were never able to deploy a preview link properly because it didn’t have the correct permissions before. Oof.&lt;/li&gt;
      &lt;li&gt;Moving on, to fix this new error I had to add an argument that specified the &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepswithentrypoint&quot;&gt;entry point&lt;/a&gt; where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firebase.json&lt;/code&gt; exists.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Start a PR for current database integration on the React side, then start experimenting with the error boundaries.&lt;/li&gt;
  &lt;li&gt;A combined retro on the whole database process?&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">52/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/13/day52.html" rel="alternate" type="text/html" title="52/100 Days of Code" /><published>2022-10-13T15:30:23-07:00</published><updated>2022-10-13T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/13/day52</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/13/day52.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Started making changes to my React side of things after the database integration.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Small changes here and there needed to be made to adjust the JWT being a different structure.&lt;/li&gt;
  &lt;li&gt;However the biggest change is trying to properly handle errors when accessing the Profile page.
    &lt;ol&gt;
      &lt;li&gt;At the moment there are two error situations:
        &lt;ol&gt;
          &lt;li&gt;There’s a database communication error, and they need to try again later
            &lt;ul&gt;
              &lt;li&gt;User doesn’t need to logout, just has to comeback later.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;There’s a server communication error, and they need to try again later
            &lt;ul&gt;
              &lt;li&gt;Need to clear user context, logout user, and need to redirect user to login page&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;With my current setup, I need to make more changes in my server to properly send an error instance that I can use to indicate the first error situation. For my second error situation, there isn’t a way for the Profile component to update the React context, however I might be able to try to pass my logout function down to the component.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;My VSCode kept formatting my files inconsistently, some varying between indentations that were 4 spaces and 2 spaces.
    &lt;ul&gt;
      &lt;li&gt;Turns out some of my files were using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spaces: 2&lt;/code&gt; and some were using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tabs: 2&lt;/code&gt; which look the same in VSCode but the raw file and on Github they appear very different.&lt;/li&gt;
      &lt;li&gt;The solution was to change the files with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tabs&lt;/code&gt; to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spaces&lt;/code&gt; and also choosing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convert Indentations To Spaces&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After making this mass reformating, it overrides my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git blame&lt;/code&gt; output on the affected files/lines.
    &lt;ul&gt;
      &lt;li&gt;To resolve this, I had to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git blame --ignore-rev &amp;lt;commit hash&amp;gt;&lt;/code&gt; and create a file to store this so I don’t have to constantly remember which commit hash to ignore.&lt;/li&gt;
      &lt;li&gt;These blog posts were pretty helpful in explaining the steps and the purpose of having these changes:
        &lt;ol&gt;
          &lt;li&gt;&lt;a href=&quot;https://akrabat.com/ignoring-revisions-with-git-blame/&quot;&gt;Ignoring Revisions with git blame&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://michaelheap.com/git-ignore-rev/&quot;&gt;A better git blame&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;The official &lt;a href=&quot;https://git-scm.com/docs/git-blame&quot;&gt;git blame documentation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;Not a blog, but a &lt;a href=&quot;https://stackoverflow.com/questions/34957237/can-i-configure-git-blame-to-always-ignore-certain-commits-want-to-fix-git-blam&quot;&gt;SO discussion on the topic&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue restructuring my React client to handle the database implementation&lt;/li&gt;
  &lt;li&gt;A retro on part one of database integration&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">51/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/12/day51.html" rel="alternate" type="text/html" title="51/100 Days of Code" /><published>2022-10-12T15:30:23-07:00</published><updated>2022-10-12T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/12/day51</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/12/day51.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;As expected once I started integrating my database, there was a wide set of changes that needed to be made to help reduce the requests being.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I removed the need to use a separate middleware that checks if the JWT is still valid and instead updated my JWT verification middleware to throw an error.
    &lt;ul&gt;
      &lt;li&gt;Note this middleware is used in all my routes, which means it affects the login route. Luckily I can just move my login route middleware to be above this authentication middleware to &lt;a href=&quot;https://stackoverflow.com/a/53011033&quot;&gt;leave it unaffected&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To resolve my login vs registration, I checked other websites that utilize OAuth for their login process and found that some combine login with registration if they’re a new user. So I added an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; conditional that registers a new user if they don’t already exist in the database.&lt;/li&gt;
  &lt;li&gt;Since I changed my JWT to utilize Discord user’s unique ID instead of their username, I had to update almost all of my routes and components that relied on the JWT for authentication.
    &lt;ul&gt;
      &lt;li&gt;Originally I thought it was as simple as just accessing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; property instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;However, since the database query returns an object that wraps the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; property, none of my functions were behaving as intended initially.&lt;/li&gt;
      &lt;li&gt;After doing some console.logs to figure out what data is being based around from the JWT, I saw that it was undefined all the way up to my authentication middleware as it wasn’t accessing the right properties in the decoded object.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;

&lt;p&gt;Hitting the harder/trickier leetcode medium problems. Will need to revist these to more thoroughly grasp the process to tackle them.&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Now that I’m not making a request to check if a JWT is valid at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; mounting, I’ll need to update my Profile component to have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/catch&lt;/code&gt; so errors are properly being handled. This change will also need to apply to my future components as I’ve removed my app-wide JWT/User Context checking to reduce repeated server requests.
    &lt;ul&gt;
      &lt;li&gt;I may change this back as I explore this new option for how my user sessions are setup.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">50/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/10/day50.html" rel="alternate" type="text/html" title="50/100 Days of Code" /><published>2022-10-10T15:30:23-07:00</published><updated>2022-10-10T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/10/day50</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/10/day50.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Now that I’m making requests to a database on top of APIs, the amount of requests I’m making per action needs to be reevaluated.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Previously my user context is setup such that Discord OAuth provides validates the user, then the client makes a request to verify a JWT and the server returns the username for React Context.&lt;/li&gt;
  &lt;li&gt;Now that I’m adding a database to the process, where I need to verify the user exists in the database before sending them to their profile page, this changes what and how this login process works
    &lt;ul&gt;
      &lt;li&gt;If I were to keep changes to a minimum, I’d have a separate route that just queries for the user’s username from the user table for the user context, and a separate route which queries for the user’s balance, activity etc.
        &lt;ul&gt;
          &lt;li&gt;However this process leads to a somewhat unnecessary route and database query as there will be a route that just gets a user’s username&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;I’ll need to explore different ways to handle user session and what can and can’t be stored on the client side of the application to minimize the number of requests made.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Another change to how things function in the application is the fact that Discord usernames can be changed.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Luckily there is a unique and stable identify that I can still use from the Discord Oauth process.&lt;/li&gt;
  &lt;li&gt;Unfortunately that adds to the amount of restructuring that needs to be done.
    &lt;ol&gt;
      &lt;li&gt;Since usernames aren’t a reliable identifier then I can’t use that as the only data in my JWT.&lt;/li&gt;
      &lt;li&gt;There will need to be a process that maps the identifier to the username, likely a forced re-login of some sort to refresh the tokens and variable values between sessions.
        &lt;ul&gt;
          &lt;li&gt;This also means if I were to store the username in the database, I’d have to make an update query.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;

&lt;p&gt;Continued on with some more of the Grind 75 problems but also went through my old interview problems to see if I could work through them faster or could optimize them. Definitely showing signs of improvement from before.&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Need to explore the different ways to handle user session now that my routes and return values all have to be adjusted for the addition of the database and finding a new unique identifier.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">49/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/09/day49.html" rel="alternate" type="text/html" title="49/100 Days of Code" /><published>2022-10-09T15:30:23-07:00</published><updated>2022-10-09T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/09/day49</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/09/day49.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Started implementing the database queries to my routes!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My backend is now connected to a PostgreSQL database!
    &lt;ul&gt;
      &lt;li&gt;Basic functionality as I figure out the structure of how queries should be made to the database&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;At the moment, when a user logs in their username is stored in the database so it can joined with their transactions later&lt;/li&gt;
  &lt;li&gt;Current issues that need to be resolved are:
    &lt;ul&gt;
      &lt;li&gt;A registration process
        &lt;ul&gt;
          &lt;li&gt;Previously to get things working I just had a conditional that would query the database or insert the user’s info to the database. This will need to be changed such that they’re two distinct queries and requests.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;There needs to be some restructuring to the React client for how the user context is obtained. Previously the route that provided the user context only returned the username, but now it can return the user’s information from the database.
        &lt;ul&gt;
          &lt;li&gt;This greatly affects how the Profile component will work as it will need to make separate requests to obtain the user’s other information like their holdings in the future.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;

&lt;p&gt;Wrapped up another set of Grind 75 problems. Also went back to work on the problems I had trouble with yesterday and solved them much faster without any issues.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Besides new topics (dynamic programming, binary), getting better at working with linked lists and the idea of references. As I’m approaching the medium level problems, will need to get more comfortable with the problems I had issues with before.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Wrap up Grind 75 week 3.&lt;/li&gt;
  &lt;li&gt;May need to open up a PR for review soon before the feature gets too big, already sitting at 9 file changes with over 100 lines of new code.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">48/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/08/day48.html" rel="alternate" type="text/html" title="48/100 Days of Code" /><published>2022-10-08T15:30:23-07:00</published><updated>2022-10-08T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/08/day48</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/08/day48.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Had my friend help me clarify why I may have been using too many &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awaits&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Here’s the previous setup:
    &lt;ol&gt;
      &lt;li&gt;The base method (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt;) I’m calling returns a response that is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;ed.&lt;/li&gt;
      &lt;li&gt;The next method (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getStockQuote&lt;/code&gt;) calls the previous method with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; and returns the response from that.
        &lt;ul&gt;
          &lt;li&gt;This method only passes in inputs to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Finally, my route calls the method (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Finnhub.getStockQuote&lt;/code&gt;) with an await and uses the response to do other logic.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;In the process above, I’m essentially doing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await (await (return await())&lt;/code&gt;, while the outermost and innermost &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;s are the most important.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt; interacts with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;finnhub&lt;/code&gt; API directly.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Finnhub.getStockQuote&lt;/code&gt; calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getStockQuote&lt;/code&gt; method to start making requests to the finnhub API.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This means the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getStockQuote&lt;/code&gt; is not needed as it’s functionally the same with or without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally got to try out my CI/CD once again for Fly.io.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;It was promising at first as local deployment worked and my PR Github action ran with no problems.
    &lt;ul&gt;
      &lt;li&gt;Also, since I’m no longer using Heroku, I removed my Heroku &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Procfile&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unfortunately this broke my deployment, as deployment failed with an error related to not being able to find my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tslint.json&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Searching up this issue directly did not yield any relevant results, but given the error was tied to removing my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Procfile&lt;/code&gt;, I looked up Fly.io’s documentation about it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After trying the &lt;a href=&quot;https://community.fly.io/t/procfile-documentation/1169&quot;&gt;suggested changes&lt;/a&gt; to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fly.toml&lt;/code&gt; to make up for not having a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Procfile&lt;/code&gt; anymore, my deployment still failed.
    &lt;ul&gt;
      &lt;li&gt;Based on the &lt;a href=&quot;https://community.fly.io/t/procfile-confusion/4225/6&quot;&gt;discussion I saw&lt;/a&gt;, I’m not the only one with this issue and the solution was to just use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Procfile&lt;/code&gt; again.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Finally done! Except attempting the login process for the deployed app led to an error again…
    &lt;ul&gt;
      &lt;li&gt;Taking a quick look at the logs, and given the fact that his app has been deleted and relaunched several times, I needed to update the secrets so it can actually communicate with the APIs I’m using.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;

&lt;p&gt;Continued on with the Grind 75 problems I left off on.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Getting better at solving the Leetcode easy problems I’ve encountered before, but still not as smooth on Binary trees problems
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://twitter.com/mxcl/status/608682016205344768?s=20&amp;amp;t=h1VhzcnR0MuMWhmimWGRSQ&quot;&gt;Invert Binary Tree&lt;/a&gt;, LCA of Binary Tree, and Balanced Binary Tree were about 90% there but got stuck on some node logic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Wrap up Grind 75 week 2.&lt;/li&gt;
  &lt;li&gt;Continue with database integration for Paper Trader.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">47/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/07/day47.html" rel="alternate" type="text/html" title="47/100 Days of Code" /><published>2022-10-07T15:30:23-07:00</published><updated>2022-10-07T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/07/day47</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/07/day47.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Wrapped up my PR on buy/sell.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;However, one thing I’m not sure about is not having to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; for one of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; methods.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     async method() {
         ...
         const response = await(axios_request);
     }

     async method2() {
         // before:
         // const res = await this.method();
         // return res;
            
         // after:
         return this.method();
     }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;Previously, I &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;ed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; before returning it, but just returning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this.method()&lt;/code&gt; also works without any issues. Tried to look into why that may be the case and which way was best practice, but didn’t find anything. Will need to reach out to my friend about what’s the best option.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Moved all my server files into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src&lt;/code&gt; based on my revelation yesterday and started a new PR.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Immediately, my previous Github action that built and deployed a temporary app on Fly.io worked on the first run.
    &lt;ul&gt;
      &lt;li&gt;Before, the first run would fail but subsequent runs would succeed.&lt;/li&gt;
      &lt;li&gt;Given this change, sounds like my previous issues with the Github action for Fly.io deployment was due to the improper file structuring…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue working on getting a database setup.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">46/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/06/day46.html" rel="alternate" type="text/html" title="46/100 Days of Code" /><published>2022-10-06T15:30:23-07:00</published><updated>2022-10-06T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/06/day46</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/06/day46.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Started delving deeper into how my database should be set up.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I have two tables for sure, users and transactions. However, I wanted to have a third table that would essentially be a user’s holdings, calcuated from an aggregate of the transactions table.
    &lt;ul&gt;
      &lt;li&gt;However, I encountered an issue of creating an aggregate table or creating a view for this data. After the discussions I found online, looks like I’ll have tothe best option is using a materialized view.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, the biggest revelation today is realizing I’ve been saving my new files and directories outside of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src&lt;/code&gt; in my server directory…&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;I decided to deploy my backend on fly.io once again, in doing so I decided to check if my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm build&lt;/code&gt; output was actually being changed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dist&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;There, I realized the files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dist&lt;/code&gt; weren’t being updated whenever I ran &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; and my fly.io deployment kept failing because the local deployment would be utilizing my local outdated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dist&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Digging around my configuration files and changing various settings, I noticed my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tsconfig.json&lt;/code&gt; has the property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;include&quot;: [ &quot;src/**/*&quot; ]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;After checking the directory structure… none of my files and folders since a few weeks ago have been saved inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src&lt;/code&gt; which meant they weren’t being included in the build process
    &lt;ul&gt;
      &lt;li&gt;Not sure why this didn’t trigger any other errors and just built successfully, but nonetheless I have found the issue.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;By moving my files to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src&lt;/code&gt; and redeploying, my application worked!
    &lt;ul&gt;
      &lt;li&gt;What a time sink it was to debug this a few weeks ago and how long it took to fix…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;

&lt;p&gt;Some quick resources I used when determining between an aggregate data table or having a view. These articles I’ll need to comeback to later once I start working on my database more.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Aggregate Table or Views
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/45382930/store-aggregate-data-in-a-table-or-a-view&quot;&gt;SO Discussion&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Probably can’t utilize views for real time
    &lt;ul&gt;
      &lt;li&gt;One resource I saw was talking about the exact use case I wanted regarding stock information. Unfortunately, the service is not free but it would solve my issue of continuously updating an aggregate of data.
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.timescale.com/blog/how-postgresql-views-and-materialized-views-work-and-how-they-influenced-timescaledb-continuous-aggregates/&quot;&gt;Continuous Aggregation&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Might be able to utilize &lt;a href=&quot;https://dba.stackexchange.com/questions/55945/postgres-optimizing-an-view-dependent-on-an-aggregate-function&quot;&gt;distinct on&lt;/a&gt;?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Wrap up the PR on my starter buy/sell feature.&lt;/li&gt;
  &lt;li&gt;Start moving my files and folders into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src&lt;/code&gt; and try to see if that fixes my fly.io deployment problems.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">45/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/05/day45.html" rel="alternate" type="text/html" title="45/100 Days of Code" /><published>2022-10-05T15:30:23-07:00</published><updated>2022-10-05T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/05/day45</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/05/day45.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Merged my refactoring of Express API Routes so far to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; with some minor changes had to be made to yesterday:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I changed the generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; request to have a default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; rather than an empty object, which removes the need for the conditional I had before.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; static async request(endpoint: string, headers: any, data: URLSearchParams = undefined, method = &quot;GET&quot;) {
     const url = `${BASE_DISCORD_API_URL}/${endpoint}`;

     const response = (await axios({ method, url, data, headers })).data;
     return response;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Moved my Discord OAuth API interfaces to be the return type for the Discord API requests in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discord.ts&lt;/code&gt; file
    &lt;ul&gt;
      &lt;li&gt;Promotes separation of concerns as the interfaces really only pertain to the response object from the Discord API, not directly the requests in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/login&lt;/code&gt; route.&lt;/li&gt;
      &lt;li&gt;This also enables not having to redefine the interface if any other routes need to use the Discord API requests - unlikely but just another example of good separation of concerns&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;However, after merging the above PR, I noticed my Firebase deploy Github action failed.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;This was unusual as it ran successfully yesterday and today there were no changes to the files that would be deployed to Firebase.
    &lt;ul&gt;
      &lt;li&gt;Comparing the Github action logs, I saw that Firebase had updated, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11.13&lt;/code&gt; being used yesterday, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11.14&lt;/code&gt; being used today&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After spending sometime looking into the error message &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error: Failed to list functions for paper-trader-182a4&lt;/code&gt; and going nowhere, I dug through the error logs and found a clue to my issue.&lt;/li&gt;
  &lt;li&gt;By adding the –debug flag to my deploy command in my CLI, I found this message:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; //...
 HTTP Error: 403, Cloud Functions API has not been used in [PROJECT] before 
 or it is disabled. Enable it by visiting [URL for Cloud Functions API] then retry.
 //...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;After following the link and enabling this API, I was able to deploy locally! But trying to deploy by running my Github action presented a different type of error:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; //...
  &quot;message&quot;: &quot;Permission &apos;cloudfunctions.functions.list&apos; denied on &apos;[PROJECT]&apos;&quot;,
 //...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Looking up this issue, I found the Github repository issues that discuessed this problem. Luckily the users there were able to &lt;a href=&quot;https://github.com/FirebaseExtended/action-hosting-deploy/issues/203#issuecomment-1127732956&quot;&gt;provide a solution&lt;/a&gt; that I was able to implement and fix my CI/CD issue.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Once I resolved my CI/CD issues, I went back to implementing the Finnhub API and created the beginning of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/stock&lt;/code&gt; routes.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Nothing too different in the structure from my previous routes and setup (classic CRUD setup).
    &lt;ul&gt;
      &lt;li&gt;Separate file for stock routes, separate file for Finnhub api requests.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, one change I had to spend some time debugging was how to properly send data in a request body
    &lt;ul&gt;
      &lt;li&gt;Current set up for my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/buy&lt;/code&gt; route is that it accepts a ticker and quantity in the request body and then the route outputs the total cost if purchase successful (basic setup to get started).&lt;/li&gt;
      &lt;li&gt;Since I originally lacked the middleware &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express.json()&lt;/code&gt;, there was no body property in my request object so I kept having trouble accessing the ticker and quantity properties I was sending to the route. A quick change once I noticed there was no body property after console logging the request object.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue building out the stock API features
    &lt;ul&gt;
      &lt;li&gt;Looks like I may have to take a detour and start working on the database to make meaningful progress though&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry></feed>