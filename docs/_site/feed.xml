<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/dev-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/dev-blog/" rel="alternate" type="text/html" /><updated>2022-10-24T23:18:26-07:00</updated><id>http://localhost:4000/dev-blog/feed.xml</id><title type="html">100 Days of Code</title><subtitle>Sammy Au&apos;s 100 Days of Code</subtitle><entry><title type="html">58/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/23/day58.html" rel="alternate" type="text/html" title="58/100 Days of Code" /><published>2022-10-23T15:30:23-07:00</published><updated>2022-10-23T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/23/day58</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/23/day58.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Continued working on figuring how I wanted my Transaction page to look like.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;After trying different structures and presentations, I ultimately decided to make the inputs a form.
    &lt;ul&gt;
      &lt;li&gt;Before when I had two buttons with on click functions, this could lead to a user to click one of the buttons accidentally once all the inputs were filled out.&lt;/li&gt;
      &lt;li&gt;In addition, by making the inputs as a form, it helps all the pieces feel connected together more logically.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;At the moment, my form submission involves several conditional statements to determine which function to call.
    &lt;ul&gt;
      &lt;li&gt;An improvement that I can forsee is to have the functions be class methods and have the form input values be the different method names. This would enable the form submission function to be more dynamic.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Add a success/redirect page once a buy/sell transaction is made
    &lt;ul&gt;
      &lt;li&gt;I’ll likely have to have the buy/sell transaction pass a state message to this new page&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Flesh out the transaction functions, but I’ll leave error handling to the next PR if things get too big.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">57/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/22/day57.html" rel="alternate" type="text/html" title="57/100 Days of Code" /><published>2022-10-22T15:30:23-07:00</published><updated>2022-10-22T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/22/day57</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/22/day57.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;First day of building out buying stocks feature.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Started off building the Trading page component
    &lt;ul&gt;
      &lt;li&gt;At the moment, pretty bare bones except for a text input field and two buttons.&lt;/li&gt;
      &lt;li&gt;In terms of additional parts to add to this page visually, it’ll probably just be the user’s balance information.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Originally I wanted it to be a form, but there wasn’t an easy way to differentiate between buying and selling upon form submission. So I opted to just have two buttons that call separate buy and sell functions.
    &lt;ul&gt;
      &lt;li&gt;There will need to be a way to disable the buttons when a transaction request is in process.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From there, it was a straightforward process of creating functions that communicate to my API server and database.&lt;/li&gt;
  &lt;li&gt;Some possible directions to go from here (besides improving current condition of the implementation):
    &lt;ul&gt;
      &lt;li&gt;Redirect user so a successful transaction page.&lt;/li&gt;
      &lt;li&gt;Redirect user to profile page with a message about recent transaction.&lt;/li&gt;
      &lt;li&gt;I’m leaning towards the first option at the moment, but I’ll see as I progress if that’s still makes sense.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Besides adding this new feature, I encountered some minor bugs that needed to be changed during this process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;After being able to make insertions to the transaction table, I noticed the transaction time column wasn’t being automatically filled out.
    &lt;ul&gt;
      &lt;li&gt;Luckily, it was a quick fix by following this &lt;a href=&quot;https://stackoverflow.com/a/9556581&quot;&gt;SO discussion&lt;/a&gt;, which was adding a default value of the current time during the row insertion.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Since I made a change to my table schema, rather than making an alter query, I opted to just drop my database and recreate my tables again.
    &lt;ul&gt;
      &lt;li&gt;Checking to see if my login process still worked, I noticed that I immediately ran into an error during my first login after recreating my database.&lt;/li&gt;
      &lt;li&gt;When I try logging in again, the process went through without any problems. This showed that it was an issue with my register portion of my login process.&lt;/li&gt;
      &lt;li&gt;In the error message, there was an issue while calling my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createToken&lt;/code&gt; method, where it had an accessing property of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; error.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;Since this method accesses the id property being passed in, and since I already confirmed my regular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; requests work, I checked if the return object of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register&lt;/code&gt; database queries were the same.&lt;/li&gt;
      &lt;li&gt;Confirming they both returned the same structure, I thought maybe I needed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register&lt;/code&gt; query.
      - That’s when I realized, I’m not returning the result of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register&lt;/code&gt; method, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createToken&lt;/code&gt; isn’t able to access the id value returned from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register&lt;/code&gt; database query.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue expanding out the buy feature
    &lt;ul&gt;
      &lt;li&gt;Mainly focusing on how I want the process to behave from start to end.&lt;/li&gt;
      &lt;li&gt;Then start including a way to check if the user can afford the entire transaction.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">56/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/21/day56.html" rel="alternate" type="text/html" title="56/100 Days of Code" /><published>2022-10-21T15:30:23-07:00</published><updated>2022-10-21T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/21/day56</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/21/day56.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Looked into using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect&lt;/code&gt;, but that didn’t quite work out.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useNavigate&lt;/code&gt; is new to &lt;a href=&quot;https://reactrouter.com/en/main/components/navigate&quot;&gt;react router v6&lt;/a&gt; and is meant to be &lt;a href=&quot;https://reactrouter.com/en/main/upgrading/v5&quot;&gt;another way to handle redirects&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;Oddly, I wasn’t able to import &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect&lt;/code&gt; from my installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-router-dom&lt;/code&gt; package. So I stuck with using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigate&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Another odd behavior while working with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigate&lt;/code&gt; was that I couldn’t do return the function from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useNavigate&lt;/code&gt; hook.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; const navigate = useNavigate();
 //...
 return navigate(...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;The error this generated was that the return type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void | element&lt;/code&gt; but JSX can only be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Element | null&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;So in my component, I’m using both a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigate&lt;/code&gt; component and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;navigate&lt;/code&gt; function.
        &lt;ul&gt;
          &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigate&lt;/code&gt; component is returned unwrapped in the component, but the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;navigate&lt;/code&gt; function is returned in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; block without any issues.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Moving onto wrapping up my error handling, I wanted to see how my current deployed application handles errors with database querying. However, I immediately ran into unexpected errors.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The console was displaying a CORS issue, and a 502 error for the API server route.
    &lt;ul&gt;
      &lt;li&gt;CORS error shouldn’t be happening as my API server does not block cross origin access.&lt;/li&gt;
      &lt;li&gt;When I removed the npm package that allowed CORS, the API route returned a 200 status code instead of 502.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Then, I took a look at the fly.io logs and it showed an error while trying to access the error response object.
    &lt;ul&gt;
      &lt;li&gt;That’s weird since I know the expected response structure from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; errors, so encountering an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; was off.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;That’s when I realized it’s not a CORS issue, but a database issue as my login process also makes a request to the database.
    &lt;ul&gt;
      &lt;li&gt;The way it was set up, the samy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/catch&lt;/code&gt; block wraps the final Discord OAuth request and the database request.&lt;/li&gt;
      &lt;li&gt;So if the database request fails, the error object is being modified based on how Discord OAuth’s error reponse object should.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From there, I separated out the database request into a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/catch&lt;/code&gt; block.&lt;/li&gt;
  &lt;li&gt;Then to resolve my deployed application issue, I had to manually go into my fly.io postgres database and add the tables needed for my application.
    &lt;ul&gt;
      &lt;li&gt;I’ll need to explore a way to update the database by running/seeding from a file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Start on building out the transactions feature
    &lt;ul&gt;
      &lt;li&gt;For building this out in the frontend, I’ll have to add quite a few more components, but I can use dummy data to make sure things are displayed properly.&lt;/li&gt;
      &lt;li&gt;For building this out in the backend, I’ll have to add methods that make queries to the database that are coupled with buy and sell requests.&lt;/li&gt;
      &lt;li&gt;Likely to start on building out the backend first as there’ll be less moving parts to handle.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">55/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/18/day55.html" rel="alternate" type="text/html" title="55/100 Days of Code" /><published>2022-10-18T15:30:23-07:00</published><updated>2022-10-18T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/18/day55</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/18/day55.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Managed to debug my error messaging on redirect!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How I previously handled redirecting was using React Router’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigate&lt;/code&gt; component.
    &lt;ul&gt;
      &lt;li&gt;This component has four props, with the one needed to send data across redirects being &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt;, which is can be accessed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useLocation&lt;/code&gt; at the redirected location.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, when I tried passing an error message string in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; prop for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigate&lt;/code&gt;, my redirected destination had &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useLocation&lt;/code&gt; hook object.&lt;/li&gt;
  &lt;li&gt;Looking into why this isn’t working, I ran into a &lt;a href=&quot;https://stackoverflow.com/a/70010073&quot;&gt;SO discussion&lt;/a&gt; that uses the function returned from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useNavigate&lt;/code&gt; hook.
    &lt;ul&gt;
      &lt;li&gt;I tried replicating the arguments being used for the function, but the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigate&lt;/code&gt; component still didn’t pass any values for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; parameter.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;At the moment, it looks like I’ll have to utilize the function from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useNavigate&lt;/code&gt; for what I need, but while looking into the &lt;a href=&quot;https://reactrouter.com/en/main/fetch/redirect&quot;&gt;React Router documentation&lt;/a&gt; further, I found the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect&lt;/code&gt; fetch utility, which may be more appropriate for what I’m doing.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Types vs Interfaces
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;In my application, I was using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; for a majority of my typing for functions and parameters, but found that using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; also worked. Given how interchangeable they were, I wondered when one should be used over the other. While most discussions I saw online about this topic seemed to boil down to preference, the official &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces&quot;&gt;Typescript documentation&lt;/a&gt; mention:&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;If you would like a heuristic, use interface until you need to use features from type.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;For my use case, there aren’t any features specific to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; so I’ll probably stick to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; for everything to be consistent.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Try using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect&lt;/code&gt; utility from the React Router documentation, then clean up my components and start a new PR.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">54/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/15/day54.html" rel="alternate" type="text/html" title="54/100 Days of Code" /><published>2022-10-15T15:30:23-07:00</published><updated>2022-10-15T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/15/day54</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/15/day54.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Explored trying to implement React Error Boundaries.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For the most part, React Error Boundaries are exactly what I wanted.
    &lt;ul&gt;
      &lt;li&gt;I’m able to unmount my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; component via calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logout&lt;/code&gt; and display a new component to the user so they won’t stay on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; page anymore.&lt;/li&gt;
      &lt;li&gt;Plus there was a &lt;a href=&quot;https://www.npmjs.com/package/react-error-boundary?activeTab=dependencies&quot;&gt;library&lt;/a&gt; that I could use so I didn’t have to write my own class components to make the Error Boundary.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, the situations that trigger the Error Boundary are not rendering errors with the component, but an asynchronous server request.
    &lt;ul&gt;
      &lt;li&gt;This is important as the React documentation specifically say this won’t work for the following situations:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Error boundaries do not catch errors for:

  - Event handlers (learn more)
  - Asynchronous code (e.g. setTimeout or requestAnimationFrame callbacks)
  - Server side rendering
  - Errors thrown in the error boundary itself (rather than its children)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;Which is why I didn’t use them before for my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;There was a blog post that mentioned a possible way to overcome this issue by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useErrorHandler&lt;/code&gt; hook from the library, which led to my Error Boundary implementation to work.
    &lt;ul&gt;
      &lt;li&gt;But it’s still not the perfect solution as it’s built on the React’s Error Boundary, so this means the errors caused by the above issues are not caught (which is my case).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, this was not all wasted efforts as ideally I’ll be using a mix of both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/catch&lt;/code&gt; and Error Boundaries. Just that for this situation, I’ll probably have to stick to using try/catch.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;The next option I’ll try to explore will be passing an error message to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component after being redirected from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; component.
    &lt;ul&gt;
      &lt;li&gt;I started to play around with it already, but haven’t been able to successfully pass an error message yet.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">53/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/14/day53.html" rel="alternate" type="text/html" title="53/100 Days of Code" /><published>2022-10-14T15:30:23-07:00</published><updated>2022-10-14T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/14/day53</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/14/day53.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;More or less finished making the small tweaks to my client to handle the changes in JWT and request return objects. However, while trying to figure out how to properly handle errors for my Profile page, I realized I can’t quite do what I did for my Login page component.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For my Profile page there are three error situations I’m aware of:
    &lt;ol&gt;
      &lt;li&gt;Backend server is down
        &lt;ul&gt;
          &lt;li&gt;Quick solution is to just logout/clear the user session and redirect to login&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Database is down
        &lt;ul&gt;
          &lt;li&gt;Display an error, but don’t need to log user out or redirect&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Database can’t find user (e.g. dropped database between user sessions)
        &lt;ul&gt;
          &lt;li&gt;Display an error, logout/redirect the user&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;The last error situations I can’t use the same error handling as before as once I call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logout&lt;/code&gt; function, then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; component is unmounted.
    &lt;ul&gt;
      &lt;li&gt;This causes an issue with trying to update state on an unmounted component, prompting a React warning about memory leaking&lt;/li&gt;
      &lt;li&gt;Since logout leads to a redirect, there isn’t an easy way to pass the error messages to the login component.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This leads me to having to explore possibly implementing React Error Boundaries and changing how I’ve previously handled errors before too.
    &lt;ul&gt;
      &lt;li&gt;Some options I saw were to create my own Error Boundary or utilize a &lt;a href=&quot;https://www.npmjs.com/package/react-error-boundary#useerrorhandlererror-error&quot;&gt;library&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;

&lt;p&gt;Strangely, my Firebase Github Action suddenly started to fail again.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The error mentioned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resource not accessible by integration&lt;/code&gt;, but my previous Github Actions had that message before without breaking anything.
    &lt;ul&gt;
      &lt;li&gt;To resolve this, I had to change the &lt;a href=&quot;https://lightrun.com/answers/firebaseextended-action-hosting-deploy-bug-unhandledpromiserejectionwarning-httperror-resource-not-accessible-by-integration&quot;&gt;workflow permissions&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Then all of a sudden I had an error saying that the action couldn’t find my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firebase.json&lt;/code&gt; and there was now a new check called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy Preview&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;This meant my previous actions were never able to deploy a preview link properly because it didn’t have the correct permissions before. Oof.&lt;/li&gt;
      &lt;li&gt;Moving on, to fix this new error I had to add an argument that specified the &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepswithentrypoint&quot;&gt;entry point&lt;/a&gt; where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firebase.json&lt;/code&gt; exists.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Start a PR for current database integration on the React side, then start experimenting with the error boundaries.&lt;/li&gt;
  &lt;li&gt;A combined retro on the whole database process?&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">52/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/13/day52.html" rel="alternate" type="text/html" title="52/100 Days of Code" /><published>2022-10-13T15:30:23-07:00</published><updated>2022-10-13T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/13/day52</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/13/day52.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Started making changes to my React side of things after the database integration.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Small changes here and there needed to be made to adjust the JWT being a different structure.&lt;/li&gt;
  &lt;li&gt;However the biggest change is trying to properly handle errors when accessing the Profile page.
    &lt;ol&gt;
      &lt;li&gt;At the moment there are two error situations:
        &lt;ol&gt;
          &lt;li&gt;There’s a database communication error, and they need to try again later
            &lt;ul&gt;
              &lt;li&gt;User doesn’t need to logout, just has to comeback later.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;There’s a server communication error, and they need to try again later
            &lt;ul&gt;
              &lt;li&gt;Need to clear user context, logout user, and need to redirect user to login page&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;With my current setup, I need to make more changes in my server to properly send an error instance that I can use to indicate the first error situation. For my second error situation, there isn’t a way for the Profile component to update the React context, however I might be able to try to pass my logout function down to the component.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;My VSCode kept formatting my files inconsistently, some varying between indentations that were 4 spaces and 2 spaces.
    &lt;ul&gt;
      &lt;li&gt;Turns out some of my files were using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spaces: 2&lt;/code&gt; and some were using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tabs: 2&lt;/code&gt; which look the same in VSCode but the raw file and on Github they appear very different.&lt;/li&gt;
      &lt;li&gt;The solution was to change the files with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tabs&lt;/code&gt; to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spaces&lt;/code&gt; and also choosing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convert Indentations To Spaces&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After making this mass reformating, it overrides my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git blame&lt;/code&gt; output on the affected files/lines.
    &lt;ul&gt;
      &lt;li&gt;To resolve this, I had to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git blame --ignore-rev &amp;lt;commit hash&amp;gt;&lt;/code&gt; and create a file to store this so I don’t have to constantly remember which commit hash to ignore.&lt;/li&gt;
      &lt;li&gt;These blog posts were pretty helpful in explaining the steps and the purpose of having these changes:
        &lt;ol&gt;
          &lt;li&gt;&lt;a href=&quot;https://akrabat.com/ignoring-revisions-with-git-blame/&quot;&gt;Ignoring Revisions with git blame&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://michaelheap.com/git-ignore-rev/&quot;&gt;A better git blame&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;The official &lt;a href=&quot;https://git-scm.com/docs/git-blame&quot;&gt;git blame documentation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;Not a blog, but a &lt;a href=&quot;https://stackoverflow.com/questions/34957237/can-i-configure-git-blame-to-always-ignore-certain-commits-want-to-fix-git-blam&quot;&gt;SO discussion on the topic&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue restructuring my React client to handle the database implementation&lt;/li&gt;
  &lt;li&gt;A retro on part one of database integration&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">51/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/12/day51.html" rel="alternate" type="text/html" title="51/100 Days of Code" /><published>2022-10-12T15:30:23-07:00</published><updated>2022-10-12T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/12/day51</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/12/day51.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;As expected once I started integrating my database, there was a wide set of changes that needed to be made to help reduce the requests being.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I removed the need to use a separate middleware that checks if the JWT is still valid and instead updated my JWT verification middleware to throw an error.
    &lt;ul&gt;
      &lt;li&gt;Note this middleware is used in all my routes, which means it affects the login route. Luckily I can just move my login route middleware to be above this authentication middleware to &lt;a href=&quot;https://stackoverflow.com/a/53011033&quot;&gt;leave it unaffected&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To resolve my login vs registration, I checked other websites that utilize OAuth for their login process and found that some combine login with registration if they’re a new user. So I added an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; conditional that registers a new user if they don’t already exist in the database.&lt;/li&gt;
  &lt;li&gt;Since I changed my JWT to utilize Discord user’s unique ID instead of their username, I had to update almost all of my routes and components that relied on the JWT for authentication.
    &lt;ul&gt;
      &lt;li&gt;Originally I thought it was as simple as just accessing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; property instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;However, since the database query returns an object that wraps the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; property, none of my functions were behaving as intended initially.&lt;/li&gt;
      &lt;li&gt;After doing some console.logs to figure out what data is being based around from the JWT, I saw that it was undefined all the way up to my authentication middleware as it wasn’t accessing the right properties in the decoded object.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;

&lt;p&gt;Hitting the harder/trickier leetcode medium problems. Will need to revist these to more thoroughly grasp the process to tackle them.&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Now that I’m not making a request to check if a JWT is valid at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; mounting, I’ll need to update my Profile component to have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/catch&lt;/code&gt; so errors are properly being handled. This change will also need to apply to my future components as I’ve removed my app-wide JWT/User Context checking to reduce repeated server requests.
    &lt;ul&gt;
      &lt;li&gt;I may change this back as I explore this new option for how my user sessions are setup.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">50/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/10/day50.html" rel="alternate" type="text/html" title="50/100 Days of Code" /><published>2022-10-10T15:30:23-07:00</published><updated>2022-10-10T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/10/day50</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/10/day50.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Now that I’m making requests to a database on top of APIs, the amount of requests I’m making per action needs to be reevaluated.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Previously my user context is setup such that Discord OAuth provides validates the user, then the client makes a request to verify a JWT and the server returns the username for React Context.&lt;/li&gt;
  &lt;li&gt;Now that I’m adding a database to the process, where I need to verify the user exists in the database before sending them to their profile page, this changes what and how this login process works
    &lt;ul&gt;
      &lt;li&gt;If I were to keep changes to a minimum, I’d have a separate route that just queries for the user’s username from the user table for the user context, and a separate route which queries for the user’s balance, activity etc.
        &lt;ul&gt;
          &lt;li&gt;However this process leads to a somewhat unnecessary route and database query as there will be a route that just gets a user’s username&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;I’ll need to explore different ways to handle user session and what can and can’t be stored on the client side of the application to minimize the number of requests made.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Another change to how things function in the application is the fact that Discord usernames can be changed.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Luckily there is a unique and stable identify that I can still use from the Discord Oauth process.&lt;/li&gt;
  &lt;li&gt;Unfortunately that adds to the amount of restructuring that needs to be done.
    &lt;ol&gt;
      &lt;li&gt;Since usernames aren’t a reliable identifier then I can’t use that as the only data in my JWT.&lt;/li&gt;
      &lt;li&gt;There will need to be a process that maps the identifier to the username, likely a forced re-login of some sort to refresh the tokens and variable values between sessions.
        &lt;ul&gt;
          &lt;li&gt;This also means if I were to store the username in the database, I’d have to make an update query.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;

&lt;p&gt;Continued on with some more of the Grind 75 problems but also went through my old interview problems to see if I could work through them faster or could optimize them. Definitely showing signs of improvement from before.&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Need to explore the different ways to handle user session now that my routes and return values all have to be adjusted for the addition of the database and finding a new unique identifier.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">49/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/09/day49.html" rel="alternate" type="text/html" title="49/100 Days of Code" /><published>2022-10-09T15:30:23-07:00</published><updated>2022-10-09T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/09/day49</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/09/day49.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Started implementing the database queries to my routes!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My backend is now connected to a PostgreSQL database!
    &lt;ul&gt;
      &lt;li&gt;Basic functionality as I figure out the structure of how queries should be made to the database&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;At the moment, when a user logs in their username is stored in the database so it can joined with their transactions later&lt;/li&gt;
  &lt;li&gt;Current issues that need to be resolved are:
    &lt;ul&gt;
      &lt;li&gt;A registration process
        &lt;ul&gt;
          &lt;li&gt;Previously to get things working I just had a conditional that would query the database or insert the user’s info to the database. This will need to be changed such that they’re two distinct queries and requests.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;There needs to be some restructuring to the React client for how the user context is obtained. Previously the route that provided the user context only returned the username, but now it can return the user’s information from the database.
        &lt;ul&gt;
          &lt;li&gt;This greatly affects how the Profile component will work as it will need to make separate requests to obtain the user’s other information like their holdings in the future.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;

&lt;p&gt;Wrapped up another set of Grind 75 problems. Also went back to work on the problems I had trouble with yesterday and solved them much faster without any issues.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Besides new topics (dynamic programming, binary), getting better at working with linked lists and the idea of references. As I’m approaching the medium level problems, will need to get more comfortable with the problems I had issues with before.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Wrap up Grind 75 week 3.&lt;/li&gt;
  &lt;li&gt;May need to open up a PR for review soon before the feature gets too big, already sitting at 9 file changes with over 100 lines of new code.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry></feed>