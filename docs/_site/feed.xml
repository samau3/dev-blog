<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/dev-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/dev-blog/" rel="alternate" type="text/html" /><updated>2022-09-07T23:33:42-07:00</updated><id>http://localhost:4000/dev-blog/feed.xml</id><title type="html">100 Days of Code</title><subtitle>Sammy Au&apos;s 100 Days of Code</subtitle><entry><title type="html">20/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/07/day20.html" rel="alternate" type="text/html" title="20/100 Days of Code" /><published>2022-09-07T15:30:23-07:00</published><updated>2022-09-07T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/07/day20</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/07/day20.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session Refactoring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was unsure what some of the comments I received on the PR, so I had a short discussion with my friend about how to approach some changes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;More consistent error handling. At the moment my error handling is pretty much just placeholder statements to come back to once I flesh out Error cases. However, there is a danger that this gets buried as a todo that is never revisited. As such, I’ll bump up the priority for having error classes started. Some quick notes from the discussion with my friend just so I have a record of it too:
    &lt;ul&gt;
      &lt;li&gt;It’s important to consider how a user could end up in a specific case that triggers an error&lt;/li&gt;
      &lt;li&gt;in those situations one should consider reasonable ways to handle the error, eg. redirecting them back to the login page&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I didn’t realize I could &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export&lt;/code&gt; variables individually. Not a big change but will help in the future if I add more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; variables that need to be exported so I don’t have to remember to change the last line of the file to include it.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// doing this&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEY1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some string 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEY2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some string 2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// instead of this&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEY1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some string 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEY2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some string 2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;KEY1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEY2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// will need to update this everytime to export new variables&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Originally my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component acted as just my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Routes&lt;/code&gt; file, but as more functions were added, that was no longer the case. This makes pulling them my new functions and routes into different files necessary.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Implement the changes to the PR and hopefully merge them into the main branch soon! (After another round of code review)&lt;/li&gt;
  &lt;li&gt;The next few PRs should be popping up soon:
    &lt;ol&gt;
      &lt;li&gt;Reformat all the files and exclude it from the commit history so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git blame&lt;/code&gt; doesn’t get overriden.&lt;/li&gt;
      &lt;li&gt;Add Error classes and routes.&lt;/li&gt;
      &lt;li&gt;The logout function is will have to be delayed as the above PRs will likely take precendent so I can minimize merge conflicts as much as possible.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session Refactoring</summary></entry><entry><title type="html">19/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/06/day19.html" rel="alternate" type="text/html" title="19/100 Days of Code" /><published>2022-09-06T15:30:23-07:00</published><updated>2022-09-06T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/06/day19</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/06/day19.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session Refactoring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Had the first review of my PR for adding User Session!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Some more major refactoring needs to be done
    &lt;ol&gt;
      &lt;li&gt;A lot of my functions that handle user session were written in the App component, but my friend suggested moving those out into a separate file too
        &lt;ul&gt;
          &lt;li&gt;Hopefully this will be a frictionless change but I imagine there might be some errors related to the function types and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; dependencies&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;My &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt; function which just checks if there’s a user that has been previously logged in by looking for a JWT in the localStorage could be streamlined better
        &lt;ul&gt;
          &lt;li&gt;Specifically, decoding the JWT for the username to send back to the server, which still decodes the JWT anyway to extract the username.&lt;/li&gt;
          &lt;li&gt;Making this change would also mean changing the way the route handles getting the user’s information from the eventual PostgreSQL database.&lt;/li&gt;
          &lt;li&gt;Current plans to make the changes would be having a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/profile&lt;/code&gt; route and when a request is made to the route, the JWT is decoded for the username and is used to query the database for that user’s information.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;I can also move my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Routes&lt;/code&gt; components into a different file so simplify my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component further&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Logout Function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also started implementing a logout function to end the user session.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The function itself wasn’t too complicated.
    &lt;ul&gt;
      &lt;li&gt;Set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; states to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Clear the localStorage of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userToken&lt;/code&gt; JWT&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, the tricky part came with how to display the Logout option in the navbar.
    &lt;ul&gt;
      &lt;li&gt;The way I had it set up was using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.map&lt;/code&gt; method on an array of strings that represented my navbar tabs. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&apos;Home&apos;, &apos;Profile&apos;, &apos;Login&apos;]&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;However, if a user exists, I wanted to replace the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; tab with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logout&lt;/code&gt; with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onClick&lt;/code&gt; function that calls my logout function.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I’ll need to do more tinkering around to see how to utilize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; method, where the last element &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logout&lt;/code&gt; will receive a different component
    &lt;ul&gt;
      &lt;li&gt;At the moment, I switched to hard coded navbar tabs. This may be the permanent solution if I can’t get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; method to work without errors. However, the Evergreen UI documentation use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; for their navbars so I want to follow that as much as possible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Wrap up the refactoring as I approach the end of this feature so I can start working on my retrospective&lt;/li&gt;
  &lt;li&gt;Wrap up the logout feature soon too as it’s closely tied to user sessions
    &lt;ul&gt;
      &lt;li&gt;I excluded it from this recent PR as it was already getting to big with about 15 file changes, 80 commits, and almost 500 lines of code added&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session Refactoring</summary></entry><entry><title type="html">18/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/05/day18.html" rel="alternate" type="text/html" title="18/100 Days of Code" /><published>2022-09-05T15:30:23-07:00</published><updated>2022-09-05T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/05/day18</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/05/day18.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Continued on with the refactoring to clean up the user session implementation!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The first big change was deleting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component.
    &lt;ul&gt;
      &lt;li&gt;This was always a temporary component to make sure the Discord OAuth flow redirect worked, but it was also supposed to act as a buffer page that would redirect the user again to hide the extra URL parameters that come from Discord (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt;).&lt;/li&gt;
      &lt;li&gt;However, with React Router, I can simply add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace&lt;/code&gt; prop when using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigate&lt;/code&gt; component to redirect the user. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace&lt;/code&gt; prop removes the previous location from the user’s history so they can’t hit the back button to access the route they were redirected away from.&lt;/li&gt;
      &lt;li&gt;This means that if I redirect back to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component from Discord and utilize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigate&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace&lt;/code&gt; prop to redirect the user to where I actually want them to go, say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt;, this solves the original purpose of having the DiscordRedirect component. Therefore, I came to the obvious decicion to delete the unnecessary component.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Fortunately, not all the code from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; went to waste as some of it lives on in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; component and others moved up into the parent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component.
    &lt;ul&gt;
      &lt;li&gt;This restructuring also helped resolve my issue on implementing user session redirecting that I had trouble with yesterday.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Overall, a majority of today was just refactoring without much new code being written. Some other changes that had to be made were:
    &lt;ol&gt;
      &lt;li&gt;Updating the redirect URIs for Discord OAuth now that I’m no longer using the buffer route/component &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Updating docstrings after the component shuffling&lt;/li&gt;
      &lt;li&gt;Adding a conditional that redirects the user if they’re already logged in&lt;/li&gt;
      &lt;li&gt;Updating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hooks (see next section)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;While adding my conditional statement to see if a user existed in Context, I placed it near the top of my components, above the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hooks. However, this created an error: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React Hook &quot;useEffect&quot; is called conditionally. React Hooks must be called in the exact same order in every component render.&lt;/code&gt; Luckily, a quick solution once again by following this &lt;a href=&quot;https://stackoverflow.com/a/57621246&quot;&gt;Stack Overflow discussion&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;The error makes sense as React needs to always be in control over what is rendered on the DOM. If a conditional blocked the rendering of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook, it loses track of what has been called from previous renders. In addition, this is defined as the first &lt;a href=&quot;https://reactjs.org/docs/hooks-rules.html&quot;&gt;Rule of Hooks&lt;/a&gt; from the official React documention.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Try to add a logout function. This will require major reworking of the existing navigation bar, so that may have to be saved for a new PR.&lt;/li&gt;
  &lt;li&gt;Start a PR and get a code review!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session</summary></entry><entry><title type="html">17/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/04/day17.html" rel="alternate" type="text/html" title="17/100 Days of Code" /><published>2022-09-04T15:30:23-07:00</published><updated>2022-09-04T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/04/day17</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/04/day17.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Started the refactoring process… but ended up fleshing out user session some more.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First refactoring I had to do was wrap my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin&lt;/code&gt; function, which is essentially my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validateUser&lt;/code&gt; function from early on, in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useCallback&lt;/code&gt; hook to resolve the compilation warning about missing dependencies in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;However, after that I realized I need to properly handle the JWT being stored from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt; function in the App &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt;. This led to creating middleware that verifies the JWT, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticateJWT&lt;/code&gt; which utilizes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonwebtoken&lt;/code&gt; library’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify&lt;/code&gt; function, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ensureCurrectUser&lt;/code&gt;, which checks if the username being queried is the same as the one saved in localStorage making the request. In addition, I needed to send the JWT with my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; requests.
    &lt;ul&gt;
      &lt;li&gt;Not too complicated to implement currently as I don’t have many routes that need this protection yet, so as I add more routes this may become a painpoint if the authorization hasn’t been implemented properly.&lt;/li&gt;
      &lt;li&gt;The only unexpected part of this was when I created the middleware in a separate function, I had to define the type for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt; function parameters. Luckily, this was a very straight forward fix by following this &lt;a href=&quot;https://stackoverflow.com/questions/27676884/explicitly-specifying-types-for-express-application-request-response&quot;&gt;Stack Overflow discussion&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;For the axios calls, it was also straightfoward - adding an Authorization header containing the token and then having that be extracted in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticateJWT&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Now that I’m adding some route protection and user session is becoming more fleshed out, I need to redirect users away from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/login&lt;/code&gt; page if they’re already logged in and send them to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/login/discord-redirect&lt;/code&gt; page.
    &lt;ul&gt;
      &lt;li&gt;My initial idea was to add an additional condition in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; that checks if the component is being accessed after receiving an auth code from Discord.&lt;/li&gt;
      &lt;li&gt;Unfortunately this led to both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component to not mount properly.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;As it stands, I’m not quite sure how to properly implement the redirecting with my current set up. My possible solutions are:
    &lt;ul&gt;
      &lt;li&gt;Changing how I determine how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component is mounted
        &lt;ul&gt;
          &lt;li&gt;I’m using a boolean state based on if there’s an auth code in the URL (which happens if Discord redirects back to my app). If a user were to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; route and I try to redirect to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discord-redirect&lt;/code&gt;, there won’t be an auth code to properly change the boolean state&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Separate out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component so it’s not a nested route with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; and then utilize React Router to have private route components.
        &lt;ul&gt;
          &lt;li&gt;This may be the likely approach as the DiscordRedirect was intended to be a temporary component anyways and it’s starting to act more like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; component.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Either way, there would be a fair amount of restructing and refactoring of my components to handle this change in data flow.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Delve deeper into how to handle the login route redirecting based on UserContext and update the docstrings as appropriate (since a few of them are now inaccurate with the recent refactoring).&lt;/li&gt;
  &lt;li&gt;I also noticed my default tab spacing was set at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt; when it really should have been set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;. Since changing the formatting will show up as changes to everything in a file, that will likely be a separate PR which doesn’t make any other changes to the code.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session</summary></entry><entry><title type="html">16/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/03/day16.html" rel="alternate" type="text/html" title="16/100 Days of Code" /><published>2022-09-03T15:30:23-07:00</published><updated>2022-09-03T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/03/day16</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/03/day16.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;
Another day of trying to debug type issues!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Following the &lt;a href=&quot;https://stackoverflow.com/questions/59125973/react-typescript-argument-of-type-is-not-assignable-to-parameter-of-type&quot;&gt;Stack Overflow discussion&lt;/a&gt; I saw yesterday, I added an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; and assigned the type to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useState&lt;/code&gt; input, resolving that error message.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nl&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setCurrentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/UserContext.Provider&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;However, making this change broke my login function as that also set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentUser&lt;/code&gt; as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; for the App Context, but adding the interface cause a type disagreement. Luckily, the solution was simply removing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setCurrentUser&lt;/code&gt; from the login function and only allow the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook that has the localStorage token in the dependency array to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentUser&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Note this works because the login function is what sets the token in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; dependency array&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Then going back to clean up my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component to utilize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useContext&lt;/code&gt; hook I encountered another interesting bug
    &lt;ul&gt;
      &lt;li&gt;At the moment, my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useContext&lt;/code&gt; provides the value for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserContext&lt;/code&gt; which is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; object until the username is set from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt; function in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook in the App component.&lt;/li&gt;
      &lt;li&gt;However, when I check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typeof&lt;/code&gt; for the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; extracted from UserContext after it’s set, the type is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Despite it being a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; when I pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; into the Paragraph component from the Evergreen component library, I receive an error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;This JSX tag&apos;s &apos;children&apos; prop expects a single child of type &apos;Element | undefined&apos;, but multiple children were provided&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To resolve this bug, I came across these possible solutions from &lt;a href=&quot;https://stackoverflow.com/questions/62382324/react-typescript-this-jsx-tags-children-prop-expects-a-single-child-of-type&quot;&gt;Stack Overflow&lt;/a&gt; and a &lt;a href=&quot;https://bobbyhadz.com/blog/react-this-tags-children-prop-expects-single-child&quot;&gt;blog post&lt;/a&gt; about this error.
    &lt;ul&gt;
      &lt;li&gt;For my use case, wrapping the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prop&lt;/code&gt; being passed into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Paragraph&lt;/code&gt; component in a fragment is enough. This may be an issue as the data in the Context expands to include other values, but in terms of trying to figure out how to properly provide and subscribe to Context, this is good for now.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue cleaning up and refactoring my hooks, namely the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; as there is a dependency array warning that will cause build errors.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session Another day of trying to debug type issues!</summary></entry><entry><title type="html">15/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/02/day15.html" rel="alternate" type="text/html" title="15/100 Days of Code" /><published>2022-09-02T15:30:23-07:00</published><updated>2022-09-02T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/02/day15</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/02/day15.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Tried to flesh out the user session process today
    &lt;ul&gt;
      &lt;li&gt;The planned flow at a high level is:
        &lt;ol&gt;
          &lt;li&gt;On app’s first load of the app/portfolio page, it reaches out to backend&lt;/li&gt;
          &lt;li&gt;(If logged in) backend will take JWT and return the application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; + portfolio info&lt;/li&gt;
          &lt;li&gt;Username will be available from application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This brings to question if decoding the username and then sending that back to the backend is necessary
    &lt;ul&gt;
      &lt;li&gt;The original idea was decoding the username from the JWT in localStorage and sending that as a parameter to a backend route that would return the user’s information (like portfolio) along with a JWT to be verified&lt;/li&gt;
      &lt;li&gt;Then the returned user information will be stored in the application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However with this approach there’s a concern about the returned data being too big (e.g. a large portfolio) and the app context really only needs the username
    &lt;ul&gt;
      &lt;li&gt;At the moment I’ll be marking these concerns down to think about but I’ll continue on with the approach of returning the user’s information/portfolio to be stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In addition to trying to expand on how to handle user sessions, I moved my login function from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component up to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component. This was needed as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component is where I want the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; to be set and provided from, and logging in also provides the information needed for updating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;. This login function is then passed down to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component
    &lt;ul&gt;
      &lt;li&gt;This will also be helpful for when if I decide to remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component and have the login function passed to a different component&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;With this change in the login function and having it update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; too, I encountered type issues regarding the state used for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;As it stands, the default state for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentUser&lt;/code&gt; state is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; and upon logging in or restoring a user session, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentUser&lt;/code&gt; is set to the user’s username (for now while I’m working on making sure user sessions is working).&lt;/li&gt;
      &lt;li&gt;Haven’t looked too deeply into this issue yet, but possible solutions I’ve seen are &lt;a href=&quot;https://stackoverflow.com/questions/59125973/react-typescript-argument-of-type-is-not-assignable-to-parameter-of-type&quot;&gt;applying an interface&lt;/a&gt; or maybe utilizing a guard statement.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue expanding the user session implementation and debug these typing issues.&lt;/li&gt;
  &lt;li&gt;Refactor the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component as that now has a lot of overloaded variables and removing them may present more issues that’ll need to be resolved.&lt;/li&gt;
  &lt;li&gt;I imagine this is the final stretch for this feature, so a retro will be coming soon&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session</summary></entry><entry><title type="html">14/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/01/day14.html" rel="alternate" type="text/html" title="14/100 Days of Code" /><published>2022-09-01T15:30:23-07:00</published><updated>2022-09-01T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/01/day14</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/01/day14.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jumped back into working on getting user sessions set up! &lt;sub&gt;Except I had to spend some time resolving merge conflicts with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch after all my recent PRs being merged…&lt;/sub&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First thing I needed to change was figuring out how to store user information for the entire app to have access to.
    &lt;ol&gt;
      &lt;li&gt;I updated my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component to store the JWT sent from the server.
        &lt;ul&gt;
          &lt;li&gt;This component will likely be removed as I expand the app since it was more of a temporary component to make sure I could get Discord OAuth working.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Then in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component I needed an extra function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt;, inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook that checks if there’s a JWT token in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage&lt;/code&gt;.
        &lt;ul&gt;
          &lt;li&gt;The goal of this function is to decode the JWT token and extract the username from the token to send to the server.&lt;/li&gt;
          &lt;li&gt;Upon successful validation of the information in the JWT token, the server will send back the user’s info which will be set as the current user&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;In order for this whole flow to work out, I would need a new route in my server (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/user/:username&lt;/code&gt;), a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PaperTraderApi&lt;/code&gt; method to send the necessary information to this route, and utilize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.Context&lt;/code&gt; to share the current user information for all components that subscribe to the context.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;With the plan set up, implementing it was mostly straightforward. Everything went smoothly except for trying to decode the JWT token in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt; function, where I encountered a very confusing bug.
    &lt;ol&gt;
      &lt;li&gt;I had some type issues with the returned value from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt;function. I tried doing the same conditional checks that I did when I last had type issues with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt; by only accessing the value within conditional statements that are true.&lt;/li&gt;
      &lt;li&gt;Unfortunately that wasn’t enough, and after whittling away at the issue, my bug came down to:
        &lt;ul&gt;
          &lt;li&gt;The Chrome console showed that the value from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt;, which I named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodedToken&lt;/code&gt; is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt; variable that had key value pairs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{username: USERNAME_STRING, iat: NUMBERS}&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; is the key value pair I wanted to extract&lt;/li&gt;
          &lt;li&gt;However, I kept getting a compilation error from Typescript where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodedToken&lt;/code&gt; was treated as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; so when I tried to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; key via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dedcodedToken.username&lt;/code&gt;, I got an error that stated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property &apos;username&apos; does not exist on type &apos;string&apos;.&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;This was very confusing as when I did &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log(typeof decodedToken)&lt;/code&gt;, I got &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; and the variable showed up as an object structure with key value pairs&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;After some time, I asked a friend for help and he suggested trying to convert the variable into JSON which worked!
    &lt;ol&gt;
      &lt;li&gt;First, I had to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON.stringify(decodedToken)&lt;/code&gt; and store that as a variable, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonToken&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Then, I saved the result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON.parse(jsonToken)&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parsedJson&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Finally, I could do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parsedJson.username&lt;/code&gt; to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; value without any errors&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;This felt like a very roundabout way resolve this issue. However, the typing of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodedToken&lt;/code&gt; is explicitly changed into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; and then an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt;, which is probably why Typescript compilation doesn’t have issues anymore.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue expanding the user session implementation, and then start refactoring again
    &lt;ul&gt;
      &lt;li&gt;There are some functions and states that could be brought up higher in the component hierarchy now that I’ve expanded on what data the components need to have access to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session</summary></entry><entry><title type="html">13/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/08/31/day13.html" rel="alternate" type="text/html" title="13/100 Days of Code" /><published>2022-08-31T15:30:23-07:00</published><updated>2022-08-31T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/08/31/day13</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/08/31/day13.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fly.io CI/CD debugging&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another full day trying to figure out deployment issues. Depsite the frustration, this should set the ground work for easier build and deployment when future features are implemented!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The first issue I tried tackling was leftover from yesterday, the Github Action that deletes the temporary Github Environments from a PR.
    &lt;ul&gt;
      &lt;li&gt;The action would find the environment, detect the number of deployments in it, and deactive them all before deleting the entire environment. That’s the expected behavior.&lt;/li&gt;
      &lt;li&gt;However, when I ran the action, it would find the environment and detect the deployments, but would stop and spit out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**Error** Not Found&lt;/code&gt;
  &lt;img src=&quot;../../../../images/20220831/githubactionerror.png&quot; alt=&quot;Github Action Error on PR Close&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Oddly, when I pass in an environment value that doesn’t exist, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non-existent-env&lt;/code&gt;, it would run the action without issues
  &lt;img src=&quot;../../../../images/20220831/githubactionsuccess.png&quot; alt=&quot;Github Action Success on PR Close with nonexistent environment&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Given the lack of progress of getting through this error, I decided to just comment out this portion of the Github Action to revist in the future&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Next, I wanted to finally close the PR for Discord OAuth implementation, which meant I had to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BACKEND_BASE_URL&lt;/code&gt; for React to know where the server is located. However, there wasn’t anyway to set that on Firebase since it’s more of a build time variable. Thus, I changed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.ts&lt;/code&gt; to explictly set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BACKEND_BASE_URL&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// previously &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BACKEND_BASE_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REACT_BASE_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// currently&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BACKEND_BASE_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://paper-trader.fly.dev/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// trailing &quot;/&quot;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Now that the Github Actions for CI/CD were finalized, I merged the previous PR for Discord OAuth to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; and watched the magic happen as everything was automatically rebuilt and redeployed!
    &lt;ul&gt;
      &lt;li&gt;Except when I tried the Discord OAuth flow on the deployed app, I got a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS&lt;/code&gt; error and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;502&lt;/code&gt; error.
        &lt;ul&gt;
          &lt;li&gt;In the console, I noticed there was an extra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; in the server URL, so made a quick change to that in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.ts&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;However, after that change I still got errors after being redirected from Discord
        &lt;ul&gt;
          &lt;li&gt;So I went to dig through the logs on &lt;a href=&quot;https://fly.io/&quot;&gt;fly.io&lt;/a&gt; and noticed my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; was still saying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt;…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I knew my Firebase React frontend is in production as the Discord OAuth authorization confirmation page showed the deployed URL. Which meant my deployed backend on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fly&lt;/code&gt; doesn’t have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_ENV=&apos;production&apos;&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;After tons of searching and digging into the docs, I found an &lt;a href=&quot;https://github.com/superfly/flyctl-actions/issues/9&quot;&gt;open issue for the Github Action&lt;/a&gt; I was using that was very similar to my problem.&lt;/li&gt;
      &lt;li&gt;Based on the discussion, I added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_ENV=&quot;production&quot;&lt;/code&gt; as a variable in both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[build.args]&lt;/code&gt; sections of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fly.toml&lt;/code&gt; file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;With these changes, I can wrap up CI/CD for now such that adding new features and expanding the app will deploy automatically once changes are made to the main branch.
    &lt;ul&gt;
      &lt;li&gt;Of course, tests need to be added to the CI/CD pipeline later on…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Can finally go back to working out user sessions!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader Fly.io CI/CD debugging</summary></entry><entry><title type="html">12/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/08/30/day12.html" rel="alternate" type="text/html" title="12/100 Days of Code" /><published>2022-08-30T15:30:23-07:00</published><updated>2022-08-30T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/08/30/day12</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/08/30/day12.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fly.io CI/CD&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Yesterday, I added a Github Action that allowed for automatic build and deployment to Fly.io once the main branch receives a merge request. However, this build and redeploy doesn’t happen when there’s a pull request, which means that there could be deployment issues that won’t be caught until it hits production environment.&lt;/li&gt;
  &lt;li&gt;To prevent this problem, I added a new Github Action that builds and deploys on pull request. Luckily there was an existing &lt;a href=&quot;https://github.com/superfly/fly-pr-review-apps&quot;&gt;Github Action&lt;/a&gt; that I could utilize. Implementing this required more work than I initially anticipated though:
    &lt;ul&gt;
      &lt;li&gt;When trying to install the action from Github Marketplace, it didn’t offer the customization that I needed:
 &lt;img src=&quot;../../../../images/20220830/PRflyactionmarket.png&quot; alt=&quot;PR Review Apps on fly.io action on Github Marketplace&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Then when I manually try to add the action by creating a new workflow on Github, it creates it on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yml&lt;/code&gt; syntax still isn’t all complete:
 &lt;img src=&quot;../../../../images/20220830/PRflyaction.png&quot; alt=&quot;PR Review Apps on fly.io action via new workflow&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This led me to utilize the basic example from the &lt;a href=&quot;https://github.com/superfly/fly-pr-review-apps&quot;&gt;Github repository&lt;/a&gt; for the action, but that also had issues:
    &lt;ul&gt;
      &lt;li&gt;The name of the action is outdated, being called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brentd/fly-staging-app@v1&lt;/code&gt;, which left me confused about how the this action is utilized in the example. I checked if others had this issue by checking the Issues and Pull Requests tabs, and found that there’s already an open PR regarding this issue. Hopefully it gets accepted and merged. 
 &lt;img src=&quot;../../../../images/20220830/PRflyactionmarketPR.png&quot; alt=&quot;Open PR for this action&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After adjusting the example and customizing my options, I tried to utilize the action but encountered a few errors:
    &lt;ul&gt;
      &lt;li&gt;Without a name for the app, the action is supposed to set one based on the default option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Defaults to pr-{number}-{repo_org}-{repo_name}.&lt;/code&gt; However, I got &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pr-{number}-null-null&lt;/code&gt;, and there is an &lt;a href=&quot;https://github.com/superfly/fly-pr-review-apps/issues/10&quot;&gt;open issue&lt;/a&gt; about it at the time of writing this.&lt;/li&gt;
      &lt;li&gt;Another issue is that the action had another error log related to having two active apps in an organization as I was building a temporary app in the same organization as the production app.
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ...
  Error failed to get app: Could not find App &quot;paper-trader-pr15&quot;
  ...
  Error To create more than 2 apps please add a payment method. https://fly.io/dashboard/paper-trader/billing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;To fix the naming issue, I decided to just give it a name following the repo instructions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp-pr-$&lt;/code&gt;. For the 2 apps issue, I created a new organization in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fly.io&lt;/code&gt; account and had the action create the temporary build deploy there by updating the action environment variable to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env: FLY_ORG: paper-trader-test&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After that, the build and deploy on PR worked! But another feature of this action was not working properly - when the PR is closed, the action destroys the fly app and removes the github environment. Unfortunately, the Github environments are not being removed.
    &lt;ul&gt;
      &lt;li&gt;Looking up the error, there was this &lt;a href=&quot;https://github.com/actions/first-interaction/issues/10&quot;&gt;issue&lt;/a&gt; and the discussion mentioned it happens when there are permission issues.
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Error: Resource not accessible by integration
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Then I remembered a comment in the action that handles deleting Github environments…
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  name: Clean up GitHub environment
  uses: strumwolf/delete-deployment-environment@v2
  if: $
  with:
    # ⚠️ The provided token needs permission for admin write:org
    token: $
    environment: pr-$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;So I created a new token that does have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin write:org&lt;/code&gt; permissions!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unfortunately, after getting passed the permissions error, a new one popped up
    &lt;ul&gt;
      &lt;li&gt;This one appears to be related to the wrong naming convention for the environments? I will have to do more digging into it tomorrow. If I’m unable to find a solution I’ll probably remove the action that cleans up Github environments and just manually delete them to move on for now.
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  deactivating deployments in environment pr-16
  Error: Not Found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Adding User Sessions&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Most of my day was spent trying to figure out the Github actions, but did briefly jump back to my JWT issue. Latching on to my assumption from yesteday about Discord authorization failing so no token it returned, a quick solution was to only utilize the JWT object if it’s valid.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodedToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodeToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// decodeToken is a function from react-jwt&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodedToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodedToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Invalid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Spend a little more time with the Github action, then go back to working on user session&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader Fly.io CI/CD</summary></entry><entry><title type="html">11/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/08/29/day11.html" rel="alternate" type="text/html" title="11/100 Days of Code" /><published>2022-08-29T15:30:23-07:00</published><updated>2022-08-29T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/08/29/day11</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/08/29/day11.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fly.io Deployment&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Deployed server on Fly.io
    &lt;ul&gt;
      &lt;li&gt;Following the docs, it was a pretty straightforward process. They even have a &lt;a href=&quot;https://fly.io/docs/speedrun/&quot;&gt;speedrun guide&lt;/a&gt; for deploying!&lt;/li&gt;
      &lt;li&gt;In addition, I got a PostgreSQL set up and connected to the server as part of the deployment process.&lt;/li&gt;
      &lt;li&gt;Given how quickly I was able to get the server deployed on Fly.io, I decided to also add CI/CD via Github actions, but to be determined if that works properly since it’ll only trigger when merges are made to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch&lt;/li&gt;
      &lt;li&gt;So far, very happy with my experience with Fly.io. Though, as I start expanding the backend, add more environmental variable, and actually utilize the database, my opinion may change.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Adding User Sessions&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Utilizing JWTs
    &lt;ul&gt;
      &lt;li&gt;Plan is to sign username and return a JWT after getting the user’s username from Discord OAuth flow.&lt;/li&gt;
      &lt;li&gt;At the moment, I am having difficulty properly handling the JWT on the frontend
        &lt;ul&gt;
          &lt;li&gt;Originally I used the regular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonwebtoken&lt;/code&gt; npm package but that caused tons of errors. Leading my to switch to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-jwt&lt;/code&gt; per this &lt;a href=&quot;https://stackoverflow.com/a/72571060&quot;&gt;recommendation&lt;/a&gt;.&lt;/li&gt;
          &lt;li&gt;However, this led to typing issues with my JWT decoding, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-jwt&lt;/code&gt; was returning type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unkown&lt;/code&gt;. Following &lt;a href=&quot;https://stackoverflow.com/a/61201393&quot;&gt;this discussion&lt;/a&gt;, I made an interface for my token.&lt;/li&gt;
          &lt;li&gt;Unfortunately, now I have an error with the object returned from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt; possibly being type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;.
            &lt;ul&gt;
              &lt;li&gt;This is likely due to the possibility of user authorization from Discord failing before getting a valid signed JWT from the server.&lt;/li&gt;
              &lt;li&gt;I’ll spend some more time trying to see if adding more validations before preparing the JWT will resolve this typing issue. If not, I’ll take a look at the other JWT packages &lt;a href=&quot;https://stackoverflow.com/a/70856437&quot;&gt;mentioned here&lt;/a&gt; to see if I have better luck debugging the type issues.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue to work on implementing user session&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader Fly.io Deployment</summary></entry></feed>