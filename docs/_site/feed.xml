<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/dev-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/dev-blog/" rel="alternate" type="text/html" /><updated>2022-10-08T23:31:48-07:00</updated><id>http://localhost:4000/dev-blog/feed.xml</id><title type="html">100 Days of Code</title><subtitle>Sammy Au&apos;s 100 Days of Code</subtitle><entry><title type="html">48/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/08/day48.html" rel="alternate" type="text/html" title="48/100 Days of Code" /><published>2022-10-08T15:30:23-07:00</published><updated>2022-10-08T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/08/day48</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/08/day48.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Had my friend help me clarify why I may have been using too many &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awaits&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Here’s the previous setup:
    &lt;ol&gt;
      &lt;li&gt;The base method (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt;) I’m calling returns a response that is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;ed.&lt;/li&gt;
      &lt;li&gt;The next method (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getStockQuote&lt;/code&gt;) calls the previous method with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; and returns the response from that.
        &lt;ul&gt;
          &lt;li&gt;This method only passes in inputs to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Finally, my route calls the method (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Finnhub.getStockQuote&lt;/code&gt;) with an await and uses the response to do other logic.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;In the process above, I’m essentially doing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await (await (return await())&lt;/code&gt;, while the outermost and innermost &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;s are the most important.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt; interacts with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;finnhub&lt;/code&gt; API directly.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Finnhub.getStockQuote&lt;/code&gt; calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getStockQuote&lt;/code&gt; method to start making requests to the finnhub API.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This means the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getStockQuote&lt;/code&gt; is not needed as it’s functionally the same with or without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally got to try out my CI/CD once again for Fly.io.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;It was promising at first as local deployment worked and my PR Github action ran with no problems.
    &lt;ul&gt;
      &lt;li&gt;Also, since I’m no longer using Heroku, I removed my Heroku &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Procfile&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unfortunately this broke my deployment, as deployment failed with an error related to not being able to find my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tslint.json&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Searching up this issue directly did not yield any relevant results, but given the error was tied to removing my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Procfile&lt;/code&gt;, I looked up Fly.io’s documentation about it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After trying the &lt;a href=&quot;https://community.fly.io/t/procfile-documentation/1169&quot;&gt;suggested changes&lt;/a&gt; to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fly.toml&lt;/code&gt; to make up for not having a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Procfile&lt;/code&gt; anymore, my deployment still failed.
    &lt;ul&gt;
      &lt;li&gt;Based on the &lt;a href=&quot;https://community.fly.io/t/procfile-confusion/4225/6&quot;&gt;discussion I saw&lt;/a&gt;, I’m not the only one with this issue and the solution was to just use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Procfile&lt;/code&gt; again.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;

&lt;p&gt;Continued on with the Grind 75 problems I left off on.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Getting better at solving the Leetcode easy problems I’ve encountered before, but still not as smooth on Binary trees problems
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://twitter.com/mxcl/status/608682016205344768?s=20&amp;amp;t=h1VhzcnR0MuMWhmimWGRSQ&quot;&gt;Invert Binary Tree&lt;/a&gt;, LCA of Binary Tree, and Balanced Binary Tree were about 90% there but got stuck on some node logic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Wrap up Grind 75 week 2.&lt;/li&gt;
  &lt;li&gt;Continue with database integration for Paper Trader.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">47/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/07/day47.html" rel="alternate" type="text/html" title="47/100 Days of Code" /><published>2022-10-07T15:30:23-07:00</published><updated>2022-10-07T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/07/day47</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/07/day47.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Wrapped up my PR on buy/sell.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;However, one thing I’m not sure about is not having to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; for one of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; methods.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     async method() {
         ...
         const response = await(axios_request);
     }

     async method2() {
         // before:
         // const res = await this.method();
         // return res;
            
         // after:
         return this.method();
     }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;Previously, I &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;ed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; before returning it, but just returning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this.method()&lt;/code&gt; also works without any issues. Tried to look into why that may be the case and which way was best practice, but didn’t find anything. Will need to reach out to my friend about what’s the best option.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Moved all my server files into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src&lt;/code&gt; based on my revelation yesterday and started a new PR.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Immediately, my previous Github action that built and deployed a temporary app on Fly.io worked on the first run.
    &lt;ul&gt;
      &lt;li&gt;Before, the first run would fail but subsequent runs would succeed.&lt;/li&gt;
      &lt;li&gt;Given this change, sounds like my previous issues with the Github action for Fly.io deployment was due to the improper file structuring…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue working on getting a database setup.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">46/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/06/day46.html" rel="alternate" type="text/html" title="46/100 Days of Code" /><published>2022-10-06T15:30:23-07:00</published><updated>2022-10-06T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/06/day46</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/06/day46.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Started delving deeper into how my database should be set up.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I have two tables for sure, users and transactions. However, I wanted to have a third table that would essentially be a user’s holdings, calcuated from an aggregate of the transactions table.
    &lt;ul&gt;
      &lt;li&gt;However, I encountered an issue of creating an aggregate table or creating a view for this data. After the discussions I found online, looks like I’ll have tothe best option is using a materialized view.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, the biggest revelation today is realizing I’ve been saving my new files and directories outside of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src&lt;/code&gt; in my server directory…&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;I decided to deploy my backend on fly.io once again, in doing so I decided to check if my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm build&lt;/code&gt; output was actually being changed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dist&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;There, I realized the files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dist&lt;/code&gt; weren’t being updated whenever I ran &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; and my fly.io deployment kept failing because the local deployment would be utilizing my local outdated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dist&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Digging around my configuration files and changing various settings, I noticed my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tsconfig.json&lt;/code&gt; has the property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;include&quot;: [ &quot;src/**/*&quot; ]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;After checking the directory structure… none of my files and folders since a few weeks ago have been saved inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src&lt;/code&gt; which meant they weren’t being included in the build process
    &lt;ul&gt;
      &lt;li&gt;Not sure why this didn’t trigger any other errors and just built successfully, but nonetheless I have found the issue.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;By moving my files to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src&lt;/code&gt; and redeploying, my application worked!
    &lt;ul&gt;
      &lt;li&gt;What a time sink it was to debug this a few weeks ago and how long it took to fix…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;

&lt;p&gt;Some quick resources I used when determining between an aggregate data table or having a view. These articles I’ll need to comeback to later once I start working on my database more.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Aggregate Table or Views
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/45382930/store-aggregate-data-in-a-table-or-a-view&quot;&gt;SO Discussion&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Probably can’t utilize views for real time
    &lt;ul&gt;
      &lt;li&gt;One resource I saw was talking about the exact use case I wanted regarding stock information. Unfortunately, the service is not free but it would solve my issue of continuously updating an aggregate of data.
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://www.timescale.com/blog/how-postgresql-views-and-materialized-views-work-and-how-they-influenced-timescaledb-continuous-aggregates/&quot;&gt;Continuous Aggregation&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Might be able to utilize &lt;a href=&quot;https://dba.stackexchange.com/questions/55945/postgres-optimizing-an-view-dependent-on-an-aggregate-function&quot;&gt;distinct on&lt;/a&gt;?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Wrap up the PR on my starter buy/sell feature.&lt;/li&gt;
  &lt;li&gt;Start moving my files and folders into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src&lt;/code&gt; and try to see if that fixes my fly.io deployment problems.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">45/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/05/day45.html" rel="alternate" type="text/html" title="45/100 Days of Code" /><published>2022-10-05T15:30:23-07:00</published><updated>2022-10-05T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/05/day45</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/05/day45.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Merged my refactoring of Express API Routes so far to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; with some minor changes had to be made to yesterday:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I changed the generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; request to have a default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; rather than an empty object, which removes the need for the conditional I had before.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; static async request(endpoint: string, headers: any, data: URLSearchParams = undefined, method = &quot;GET&quot;) {
     const url = `${BASE_DISCORD_API_URL}/${endpoint}`;

     const response = (await axios({ method, url, data, headers })).data;
     return response;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Moved my Discord OAuth API interfaces to be the return type for the Discord API requests in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discord.ts&lt;/code&gt; file
    &lt;ul&gt;
      &lt;li&gt;Promotes separation of concerns as the interfaces really only pertain to the response object from the Discord API, not directly the requests in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/login&lt;/code&gt; route.&lt;/li&gt;
      &lt;li&gt;This also enables not having to redefine the interface if any other routes need to use the Discord API requests - unlikely but just another example of good separation of concerns&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;However, after merging the above PR, I noticed my Firebase deploy Github action failed.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;This was unusual as it ran successfully yesterday and today there were no changes to the files that would be deployed to Firebase.
    &lt;ul&gt;
      &lt;li&gt;Comparing the Github action logs, I saw that Firebase had updated, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11.13&lt;/code&gt; being used yesterday, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11.14&lt;/code&gt; being used today&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After spending sometime looking into the error message &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error: Failed to list functions for paper-trader-182a4&lt;/code&gt; and going nowhere, I dug through the error logs and found a clue to my issue.&lt;/li&gt;
  &lt;li&gt;By adding the –debug flag to my deploy command in my CLI, I found this message:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; //...
 HTTP Error: 403, Cloud Functions API has not been used in [PROJECT] before 
 or it is disabled. Enable it by visiting [URL for Cloud Functions API] then retry.
 //...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;After following the link and enabling this API, I was able to deploy locally! But trying to deploy by running my Github action presented a different type of error:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; //...
  &quot;message&quot;: &quot;Permission &apos;cloudfunctions.functions.list&apos; denied on &apos;[PROJECT]&apos;&quot;,
 //...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Looking up this issue, I found the Github repository issues that discuessed this problem. Luckily the users there were able to &lt;a href=&quot;https://github.com/FirebaseExtended/action-hosting-deploy/issues/203#issuecomment-1127732956&quot;&gt;provide a solution&lt;/a&gt; that I was able to implement and fix my CI/CD issue.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Once I resolved my CI/CD issues, I went back to implementing the Finnhub API and created the beginning of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/stock&lt;/code&gt; routes.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Nothing too different in the structure from my previous routes and setup (classic CRUD setup).
    &lt;ul&gt;
      &lt;li&gt;Separate file for stock routes, separate file for Finnhub api requests.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, one change I had to spend some time debugging was how to properly send data in a request body
    &lt;ul&gt;
      &lt;li&gt;Current set up for my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/buy&lt;/code&gt; route is that it accepts a ticker and quantity in the request body and then the route outputs the total cost if purchase successful (basic setup to get started).&lt;/li&gt;
      &lt;li&gt;Since I originally lacked the middleware &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;express.json()&lt;/code&gt;, there was no body property in my request object so I kept having trouble accessing the ticker and quantity properties I was sending to the route. A quick change once I noticed there was no body property after console logging the request object.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue building out the stock API features
    &lt;ul&gt;
      &lt;li&gt;Looks like I may have to take a detour and start working on the database to make meaningful progress though&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">44/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/04/day44.html" rel="alternate" type="text/html" title="44/100 Days of Code" /><published>2022-10-04T15:30:23-07:00</published><updated>2022-10-04T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/04/day44</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/04/day44.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Continued refactoring my Express API Routes!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I moved my axios requests into a separate file outside of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/login&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/profile&lt;/code&gt; routes
    &lt;ul&gt;
      &lt;li&gt;Once again a pretty straightforward process, until it wasn’t&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; request builder, I orginally had this set up:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; static async request(endpoint: string, headers: any, data = {}, method = &quot;GET&quot;) {
     const url = `${BASE_DISCORD_API_URL}/${endpoint}`;

     const response = (await axios({ method, url, data, headers })).data;
     return response;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;I thought by having the default value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; be an empty object, whenever I have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; request there would be an empty object for that property in the request. Note, in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; request, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; is provided as an input argument&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When I went to test my login flow again, I kept getting this error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Your client has issued a malformed or illegal request&lt;/code&gt;. Luckily with my separate catch blocks indicating which request is generating the error, I found that my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; request to the Discord &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users&lt;/code&gt; route was not the correct request format.
    &lt;ul&gt;
      &lt;li&gt;The issue was that my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; request was sending an empty object in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; property, when it should be sending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; for the data property.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To resolve this, my generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; request method needed to set the data property as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; when a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; request is made:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; static async request(endpoint: string, headers: any, body = {}, method = &quot;GET&quot;) {
     const url = `${BASE_DISCORD_API_URL}/${endpoint}`;
     const data = (method === &quot;GET&quot;)
     ? undefined
     : body;

     const response = (await axios({ method, url, data, headers })).data;
     return response;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Originally I was planning to just do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return await&lt;/code&gt; in my new class making axios requests. However, when I double checked if that was a good idea, I found this documentation from &lt;a href=&quot;https://eslint.org/docs/latest/rules/no-return-await&quot;&gt;ESLint&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;The gist is that doing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return await&lt;/code&gt; is bad practice as it leads to performance issues related to call stack Promise resolving. However, it’s allowed inside a try catch block.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Start on implementing the stock API!
    &lt;ul&gt;
      &lt;li&gt;This will likely start as building out the feature both in the frontend and backend, but if it gets too big I’ll split up the PR&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">43/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/03/day43.html" rel="alternate" type="text/html" title="43/100 Days of Code" /><published>2022-10-03T15:30:23-07:00</published><updated>2022-10-03T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/03/day43</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/03/day43.html">&lt;h3 id=&quot;paper-trader-error-handling-retrospective&quot;&gt;Paper Trader Error Handling Retrospective&lt;/h3&gt;

&lt;p&gt;Overall there isn’t much to reflect on as the whole process was very iterative, where the more the features became fleshed out, the more obvious some pieces code be broken up or refactored.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;For my route errors, I had an idea that some functions could be separated out or refactored to be more clean, such as not having a nested try catch or having to directly modify the error objects based on which request generated it. However, as I was working through it, I couldn’t quite get it to work on the first time, so I pushed forward with what worked. As things progressed, it became clearer where things can be split and what code chunks can be simplified.&lt;/li&gt;
  &lt;li&gt;For my React error handling, the biggest take away was just cleaning up where my errors are being thrown. Previously they were being thrown in my API request methods, but that was too low of a location which made the errors inaccessible in my components. Once again, as my components were more clearly defined, I was able to properly display errors in the right location by catching them where needed. However, there was a learning moment where I had to await a promise that threw my error. Without awaiting, my catch blocks never triggerred which made debugging where my errors are being processed confusing at the time.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Worked on refactoring my Express API Routes!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Nothing crazy, just separating out my two routes, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/login&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/profile&lt;/code&gt;, into their own files out of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.ts&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;However, a change that probably would have saved me headache in having a cleaner URL parameter object was adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt; to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process.env&lt;/code&gt; variables.
    &lt;ul&gt;
      &lt;li&gt;When trying to reuse my object structure for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new URLSearchParams({URL_QUERY_PARAMS_OBJECT})&lt;/code&gt;, I encountered the same error I had the first time I tried working with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; and the Discord OAuth &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/token&lt;/code&gt; route. Specifically, the entire object was causing a type error.&lt;/li&gt;
      &lt;li&gt;Looking into it, I was able to narrow down the two properties causing the type errors, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clientId&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clientSecret&lt;/code&gt;, which are my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process.env&lt;/code&gt; variables. My linter shows that their type was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string | undefined&lt;/code&gt; which is understandable as maybe the environmental variables aren’t set. However, I know they will be set as they’re necessary to have the app communicate with the Discord API.&lt;/li&gt;
      &lt;li&gt;This led me to find this &lt;a href=&quot;https://stackoverflow.com/a/66040743&quot;&gt;SO discussion&lt;/a&gt;, and by adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt; to the end of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process.env&lt;/code&gt; values I resolved the type error.
        &lt;ul&gt;
          &lt;li&gt;Interestingly, I just tried again without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt; and the type error still isn’t appearing so this change may not be entirely necessary.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, I finally found a free real-time stock price API!&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Looking forward to implement &lt;a href=&quot;https://finnhub.io/docs/api/quote&quot;&gt;Finnhub&lt;/a&gt; for my buy/sell routes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue refactoring, most likely moving my axios requests to a separate file and breaking it up into class methods again.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader Error Handling Retrospective</summary></entry><entry><title type="html">42/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/02/day42.html" rel="alternate" type="text/html" title="42/100 Days of Code" /><published>2022-10-02T15:30:23-07:00</published><updated>2022-10-02T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/02/day42</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/02/day42.html">&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;

&lt;p&gt;Went back through old problems I did on Grind 75.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Week 1 #1, &lt;a href=&quot;https://leetcode.com/problems/two-sum/&quot;&gt;Leetcode 1. Two Sum&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Naive solution is to do a nested for loop (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n2)&lt;/code&gt;)
        &lt;ul&gt;
          &lt;li&gt;Outer for loop starts at an element, then the inner for loop checks of the rest of the elements in the array sum to target&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Optimal solution would be to utilize a hashmap (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;)
        &lt;ul&gt;
          &lt;li&gt;For each iterations, find the difference between current value and target value
            &lt;ul&gt;
              &lt;li&gt;Then check if the difference has been encountered before, returning the current index and stored index from previously seen value&lt;/li&gt;
              &lt;li&gt;If the difference has not been seen before, store the index and value in a hashmap&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Week 1 #2, &lt;a href=&quot;https://leetcode.com/problems/valid-parentheses&quot;&gt;Leetcode 20. Valid Parentheses&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Utilize a stack (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;)
        &lt;ul&gt;
          &lt;li&gt;Iterate through input string, storing the open parentheses&lt;/li&gt;
          &lt;li&gt;If a closing parenthesis is encountered, pop the stack and see if they’re a matching pair; return false if not matching&lt;/li&gt;
          &lt;li&gt;After iterating through the loop, check if the stack is empty incase there was no closing parenthesis to trigger the conditional check&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Week 1 #3, &lt;a href=&quot;https://leetcode.com/problems/merge-two-sorted-lists&quot;&gt;Leetcode 21. Merge Two Sorted Lists&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Iterate through the linkedLists (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;)
        &lt;ul&gt;
          &lt;li&gt;Initialize an empty linkedlist with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new ListNode&lt;/code&gt; that represents merged list output, then declare a variable to manipulate as a node of the empty list&lt;/li&gt;
          &lt;li&gt;Iterate through the two input lists as long as both lists still have values
            &lt;ul&gt;
              &lt;li&gt;Use conditionals to compare which node to add to the merged list&lt;/li&gt;
              &lt;li&gt;Update lists and nodes being pointed at to properly represent next nodes to check&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;After finishing the loop, the lists may be of uneven length so need to add remaining nodes from longer list to merged list&lt;/li&gt;
          &lt;li&gt;Need to return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mergedList.next&lt;/code&gt; as regular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mergedList&lt;/code&gt; represents the empty node we initialized&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Leetcode</summary></entry><entry><title type="html">41/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/30/day41.html" rel="alternate" type="text/html" title="41/100 Days of Code" /><published>2022-09-30T15:30:23-07:00</published><updated>2022-09-30T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/30/day41</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/30/day41.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Continued working on the open PR for React error handling!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Mostly minor changes related to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.logs&lt;/code&gt; revealing potentially too much information so all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.logs&lt;/code&gt; have been removed from components
    &lt;ul&gt;
      &lt;li&gt;In addition to revealing too much information, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.logs&lt;/code&gt; aren’t needed now that debug what information is present in the components is not needed at the moment.
        &lt;ul&gt;
          &lt;li&gt;Of course, as components or features change, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.logs&lt;/code&gt; will be added then for development/debugging.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After I initally opened up the PR, I tried to start my local environment but encountered an error:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; False expression: Non-string value passed to ts.resolveTypeReferenceDirective, likely by a wrapping package working with an outdated resolveTypeReferenceDirectives signature. This is probably not a problem in TS itself.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;This sudden error suprised me as there were no changes However, this added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts-node&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; section whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts-node-dev&lt;/code&gt; was added in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; section.
        &lt;ul&gt;
          &lt;li&gt;For consistency, moved both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts-node&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts-node-dev&lt;/code&gt; to be in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Wrap up this PR and then start on the retros for the error handling.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">40/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/29/day40.html" rel="alternate" type="text/html" title="40/100 Days of Code" /><published>2022-09-29T15:30:23-07:00</published><updated>2022-09-29T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/29/day40</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/29/day40.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Finished the Express Error Handling PR and merged to main!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Managed to figure out how to have the two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; requests to the Discord API be two separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; blocks.
    &lt;ul&gt;
      &lt;li&gt;My previous attempts would just have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next()&lt;/code&gt; in the catch block, where if the first request to Discord &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/token&lt;/code&gt; fails a request is still made to Discord &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users&lt;/code&gt; when it should have even be attempted.&lt;/li&gt;
      &lt;li&gt;The solution was to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return next()&lt;/code&gt;, which is explained very well in this &lt;a href=&quot;https://stackoverflow.com/questions/16810449/when-to-use-next-and-return-next-in-node-js&quot;&gt;discussion&lt;/a&gt; here as to why this is necessary.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that the backend API has errors, time to start implementing some of that error handling in the frontend React client too.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I opted to not use React boundaries as that’s more for components encountering errors, rather than API requests or server requests causing errors.&lt;/li&gt;
  &lt;li&gt;The first challenge was trying to get the errors to be caught in the right component for logging in.
    &lt;ul&gt;
      &lt;li&gt;First, I had to remove the try catch blocks in my class methods that make requests to my backend.&lt;/li&gt;
      &lt;li&gt;Then in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component, I wrapped the function call in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; block.
        &lt;ul&gt;
          &lt;li&gt;Note, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin&lt;/code&gt; is passed down from the parent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component and is a promise (due to being returned from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useCallback&lt;/code&gt;). Before, I didn’t await &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin&lt;/code&gt; which caused my catch block to never trigger as there was no error to catch yet.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, there are two points of failure during the login process, one being a CSRF attack/clickjacking and another being issues with requests from Discord’s OAuth API.
    &lt;ul&gt;
      &lt;li&gt;This meant having to use conditionals to display a relevant message for the issue.
        &lt;ul&gt;
          &lt;li&gt;If it’s a CSRF issue, they should just try to login again as the state string is reset.&lt;/li&gt;
          &lt;li&gt;If it’s a Discord API issue, then they should try logging in later.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Also note that the search parameters are reset if an error occurred. This is to clean the URL so the old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; parameter isn’t reused and so refreshing the page doesn’t call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin&lt;/code&gt; again (which is called if there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; parameter).&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; useEffect(() =&amp;gt; {
     async function loadUser() {
         if (authCode !== undefined) {
             try {
             await handleLogin();
             } catch (error) {
                 if (error instanceof StateError) {
                     localStorage.removeItem(&apos;csrfStateString&apos;);
                     UserSession.storeCsrfStateString();
                     setErrors(&quot;There was an issue with your request. Please try again.&quot;);
                 }
                 if (error instanceof AxiosError) {
                     setErrors(&quot;There&apos;s an issue with getting your profile information. Please try again later.&quot;);
                 }
                 setSearchParams(&quot;&quot;);
             }
         }
     }
     loadUser()
 }, [handleLogin, authCode, setSearchParams]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;To display the information, I used conditional values and Evergreen UI’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alert&lt;/code&gt; component.
    &lt;ul&gt;
      &lt;li&gt;A small tricky part was figuring out the conditionals to properly show the appropriate components, when there is an error and have been redirected, when there is no error and hasn’t been redirected, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/20220929/loginErrorMessage.gif&quot; alt=&quot;Login Error Message&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Write up a retrospective on the Express Errors? Might combine it with the React errors if it’s not that big.&lt;/li&gt;
  &lt;li&gt;Open the React errors PR.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">39/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/28/day39.html" rel="alternate" type="text/html" title="39/100 Days of Code" /><published>2022-09-28T15:30:23-07:00</published><updated>2022-09-28T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/28/day39</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/28/day39.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Recieved some feedback on my previously opened PR, luckily mostly minor changes!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Added typing to the variables that store the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; response values.
    &lt;ul&gt;
      &lt;li&gt;In this process, realized that I haven’t been storing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response.data&lt;/code&gt; and was doing this step separately.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const var1 = await axios()&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const var2 = var1.data&lt;/code&gt; changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const var1 = (await axios()).data&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Made some minor refactoring to reduce the unnecessary variables.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Changed my login request route to fail fast by checking if the parameter is missing rather than checking if it exists.
    &lt;ul&gt;
      &lt;li&gt;Used to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (code)&lt;/code&gt; but is not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (!code) return next(new BadRequestError())&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also worked on the React error side of things and got a better understanding of where errors should be thrown&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Previously, my class methods that made the requests to my server had &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; blocks that threw errors.&lt;/li&gt;
  &lt;li&gt;Made the change such that the React hook that makes that calls the methods to be wrapped in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;At the moment, this method is called at the parent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component, but I wanted the errors to be within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component.
    &lt;ul&gt;
      &lt;li&gt;Doesn’t seem like passing the errors down to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component is the correct approach as it lifts the error state too high in my opinion.&lt;/li&gt;
      &lt;li&gt;Will need to keep exploring to see if there’s a better approach.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Try to see if having separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; blocks is a possible alternative to the nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; blocks
    &lt;ul&gt;
      &lt;li&gt;Previously, the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; failing still allowed the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; to be ran
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/token&lt;/code&gt; request fails, but a request is still made to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users&lt;/code&gt; without an access token&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry></feed>