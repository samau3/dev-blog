<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/dev-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/dev-blog/" rel="alternate" type="text/html" /><updated>2022-10-02T23:33:36-07:00</updated><id>http://localhost:4000/dev-blog/feed.xml</id><title type="html">100 Days of Code</title><subtitle>Sammy Au&apos;s 100 Days of Code</subtitle><entry><title type="html">42/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/10/02/day42.html" rel="alternate" type="text/html" title="42/100 Days of Code" /><published>2022-10-02T15:30:23-07:00</published><updated>2022-10-02T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/10/02/day42</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/10/02/day42.html">&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;

&lt;p&gt;Went back through old problems I did on Grind 75.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Week 1 #1, &lt;a href=&quot;https://leetcode.com/problems/two-sum/&quot;&gt;Leetcode 1. Two Sum&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Naive solution is to do a nested for loop (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n2)&lt;/code&gt;)
        &lt;ul&gt;
          &lt;li&gt;Outer for loop starts at an element, then the inner for loop checks of the rest of the elements in the array sum to target&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Optimal solution would be to utilize a hashmap (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;)
        &lt;ul&gt;
          &lt;li&gt;For each iterations, find the difference between current value and target value
            &lt;ul&gt;
              &lt;li&gt;Then check if the difference has been encountered before, returning the current index and stored index from previously seen value&lt;/li&gt;
              &lt;li&gt;If the difference has not been seen before, store the index and value in a hashmap&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Week 1 #2, &lt;a href=&quot;https://leetcode.com/problems/valid-parentheses&quot;&gt;Leetcode 20. Valid Parentheses&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Utilize a stack (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;)
        &lt;ul&gt;
          &lt;li&gt;Iterate through input string, storing the open parentheses&lt;/li&gt;
          &lt;li&gt;If a closing parenthesis is encountered, pop the stack and see if they’re a matching pair; return false if not matching&lt;/li&gt;
          &lt;li&gt;After iterating through the loop, check if the stack is empty incase there was no closing parenthesis to trigger the conditional check&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Week 1 #3, &lt;a href=&quot;https://leetcode.com/problems/merge-two-sorted-lists&quot;&gt;Leetcode 21. Merge Two Sorted Lists&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Iterate through the linkedLists (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;)
        &lt;ul&gt;
          &lt;li&gt;Initialize an empty linkedlist with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new ListNode&lt;/code&gt; that represents merged list output, then declare a variable to manipulate as a node of the empty list&lt;/li&gt;
          &lt;li&gt;Iterate through the two input lists as long as both lists still have values
            &lt;ul&gt;
              &lt;li&gt;Use conditionals to compare which node to add to the merged list&lt;/li&gt;
              &lt;li&gt;Update lists and nodes being pointed at to properly represent next nodes to check&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;After finishing the loop, the lists may be of uneven length so need to add remaining nodes from longer list to merged list&lt;/li&gt;
          &lt;li&gt;Need to return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mergedList.next&lt;/code&gt; as regular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mergedList&lt;/code&gt; represents the empty node we initialized&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Leetcode</summary></entry><entry><title type="html">41/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/30/day41.html" rel="alternate" type="text/html" title="41/100 Days of Code" /><published>2022-09-30T15:30:23-07:00</published><updated>2022-09-30T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/30/day41</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/30/day41.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Continued working on the open PR for React error handling!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Mostly minor changes related to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.logs&lt;/code&gt; revealing potentially too much information so all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.logs&lt;/code&gt; have been removed from components
    &lt;ul&gt;
      &lt;li&gt;In addition to revealing too much information, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.logs&lt;/code&gt; aren’t needed now that debug what information is present in the components is not needed at the moment.
        &lt;ul&gt;
          &lt;li&gt;Of course, as components or features change, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.logs&lt;/code&gt; will be added then for development/debugging.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After I initally opened up the PR, I tried to start my local environment but encountered an error:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; False expression: Non-string value passed to ts.resolveTypeReferenceDirective, likely by a wrapping package working with an outdated resolveTypeReferenceDirectives signature. This is probably not a problem in TS itself.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;This sudden error suprised me as there were no changes However, this added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts-node&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; section whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts-node-dev&lt;/code&gt; was added in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; section.
        &lt;ul&gt;
          &lt;li&gt;For consistency, moved both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts-node&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts-node-dev&lt;/code&gt; to be in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Wrap up this PR and then start on the retros for the error handling.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">40/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/29/day40.html" rel="alternate" type="text/html" title="40/100 Days of Code" /><published>2022-09-29T15:30:23-07:00</published><updated>2022-09-29T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/29/day40</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/29/day40.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Finished the Express Error Handling PR and merged to main!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Managed to figure out how to have the two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; requests to the Discord API be two separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; blocks.
    &lt;ul&gt;
      &lt;li&gt;My previous attempts would just have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next()&lt;/code&gt; in the catch block, where if the first request to Discord &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/token&lt;/code&gt; fails a request is still made to Discord &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users&lt;/code&gt; when it should have even be attempted.&lt;/li&gt;
      &lt;li&gt;The solution was to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return next()&lt;/code&gt;, which is explained very well in this &lt;a href=&quot;https://stackoverflow.com/questions/16810449/when-to-use-next-and-return-next-in-node-js&quot;&gt;discussion&lt;/a&gt; here as to why this is necessary.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that the backend API has errors, time to start implementing some of that error handling in the frontend React client too.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I opted to not use React boundaries as that’s more for components encountering errors, rather than API requests or server requests causing errors.&lt;/li&gt;
  &lt;li&gt;The first challenge was trying to get the errors to be caught in the right component for logging in.
    &lt;ul&gt;
      &lt;li&gt;First, I had to remove the try catch blocks in my class methods that make requests to my backend.&lt;/li&gt;
      &lt;li&gt;Then in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component, I wrapped the function call in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; block.
        &lt;ul&gt;
          &lt;li&gt;Note, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin&lt;/code&gt; is passed down from the parent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component and is a promise (due to being returned from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useCallback&lt;/code&gt;). Before, I didn’t await &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin&lt;/code&gt; which caused my catch block to never trigger as there was no error to catch yet.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, there are two points of failure during the login process, one being a CSRF attack/clickjacking and another being issues with requests from Discord’s OAuth API.
    &lt;ul&gt;
      &lt;li&gt;This meant having to use conditionals to display a relevant message for the issue.
        &lt;ul&gt;
          &lt;li&gt;If it’s a CSRF issue, they should just try to login again as the state string is reset.&lt;/li&gt;
          &lt;li&gt;If it’s a Discord API issue, then they should try logging in later.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Also note that the search parameters are reset if an error occurred. This is to clean the URL so the old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; parameter isn’t reused and so refreshing the page doesn’t call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin&lt;/code&gt; again (which is called if there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; parameter).&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; useEffect(() =&amp;gt; {
     async function loadUser() {
         if (authCode !== undefined) {
             try {
             await handleLogin();
             } catch (error) {
                 if (error instanceof StateError) {
                     localStorage.removeItem(&apos;csrfStateString&apos;);
                     UserSession.storeCsrfStateString();
                     setErrors(&quot;There was an issue with your request. Please try again.&quot;);
                 }
                 if (error instanceof AxiosError) {
                     setErrors(&quot;There&apos;s an issue with getting your profile information. Please try again later.&quot;);
                 }
                 setSearchParams(&quot;&quot;);
             }
         }
     }
     loadUser()
 }, [handleLogin, authCode, setSearchParams]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;To display the information, I used conditional values and Evergreen UI’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alert&lt;/code&gt; component.
    &lt;ul&gt;
      &lt;li&gt;A small tricky part was figuring out the conditionals to properly show the appropriate components, when there is an error and have been redirected, when there is no error and hasn’t been redirected, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/20220929/loginErrorMessage.gif&quot; alt=&quot;Login Error Message&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Write up a retrospective on the Express Errors? Might combine it with the React errors if it’s not that big.&lt;/li&gt;
  &lt;li&gt;Open the React errors PR.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">39/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/28/day39.html" rel="alternate" type="text/html" title="39/100 Days of Code" /><published>2022-09-28T15:30:23-07:00</published><updated>2022-09-28T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/28/day39</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/28/day39.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Recieved some feedback on my previously opened PR, luckily mostly minor changes!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Added typing to the variables that store the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; response values.
    &lt;ul&gt;
      &lt;li&gt;In this process, realized that I haven’t been storing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response.data&lt;/code&gt; and was doing this step separately.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const var1 = await axios()&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const var2 = var1.data&lt;/code&gt; changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const var1 = (await axios()).data&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Made some minor refactoring to reduce the unnecessary variables.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Changed my login request route to fail fast by checking if the parameter is missing rather than checking if it exists.
    &lt;ul&gt;
      &lt;li&gt;Used to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (code)&lt;/code&gt; but is not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (!code) return next(new BadRequestError())&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also worked on the React error side of things and got a better understanding of where errors should be thrown&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Previously, my class methods that made the requests to my server had &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; blocks that threw errors.&lt;/li&gt;
  &lt;li&gt;Made the change such that the React hook that makes that calls the methods to be wrapped in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;At the moment, this method is called at the parent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component, but I wanted the errors to be within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component.
    &lt;ul&gt;
      &lt;li&gt;Doesn’t seem like passing the errors down to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component is the correct approach as it lifts the error state too high in my opinion.&lt;/li&gt;
      &lt;li&gt;Will need to keep exploring to see if there’s a better approach.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Try to see if having separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; blocks is a possible alternative to the nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; blocks
    &lt;ul&gt;
      &lt;li&gt;Previously, the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; failing still allowed the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try catch&lt;/code&gt; to be ran
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/token&lt;/code&gt; request fails, but a request is still made to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users&lt;/code&gt; without an access token&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">38/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/27/day38.html" rel="alternate" type="text/html" title="38/100 Days of Code" /><published>2022-09-27T15:30:23-07:00</published><updated>2022-09-27T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/27/day38</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/27/day38.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Started working on handling errors in React
    &lt;ul&gt;
      &lt;li&gt;Originally I thought I’d need to use React Error Boundaries, but that doesn’t seem to be necessary? Though I did see someone use it as a &lt;a href=&quot;https://stackoverflow.com/a/50220675&quot;&gt;solution&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;At the moment, errors are being created from my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; calls to the server for Discord OAuth.
    &lt;ul&gt;
      &lt;li&gt;My actual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; calls that I stored as methods on my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserSession&lt;/code&gt; class utilize try/catch which throws an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error&lt;/code&gt; in the catch block.&lt;/li&gt;
      &lt;li&gt;However, these throws show up in the console and doesn’t trigger my try/catch blocks in my React components.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I’ll need to tinker around some more to figure out where to properly throw these errors, or if I have to utilize the Error Boundaries.
    &lt;ul&gt;
      &lt;li&gt;The problem I see with utilizing the Error Boundaries is that will likely lead to massive refactoring of my components which may not be neccessary?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue researching what’s the best way to handle displaying errors on the React side.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">37/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/24/day37.html" rel="alternate" type="text/html" title="37/100 Days of Code" /><published>2022-09-24T15:30:23-07:00</published><updated>2022-09-24T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/24/day37</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/24/day37.html">&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;
&lt;p&gt;Leetcode 57. Insert Interval&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If the end of the newInterval is less than the start value of the current interval, there is no overlap
    &lt;ul&gt;
      &lt;li&gt;That means we add it to the result array and then add the remaining intervals after the current one&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If the start of the new array is greater than the end of the current array, then that means there is no overlap&lt;/li&gt;
  &lt;li&gt;If there is an overlap, update the newInterval that will be inserted with the minimum between the start values and the max between the end values&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
var insert = function (intervals, newInterval) {
    // initialize an empty array to build up with the new intervals
    let res = [];

    // iterate through the intervals
    for (let i = 0; i &amp;lt; intervals.length; i++) {
        // if the end of the newInterval is less than the start value of the current interval, there is no overlap
        // and that means we add it to the result array and then add the remaining intervals after the current one
        // note the use of slice, as if we built an newInterval due to overlap in previous loops, we want to exclude those
        if (newInterval[1] &amp;lt; intervals[i][0]) {
            res.push(newInterval, ...intervals.slice(i));
            return res;
        }
        // else if the start of the new array is greater than the end of the current array, then that means there is no overlap
        // and we just add the current array to the result array and continue looping
        else if (newInterval[0] &amp;gt; intervals[i][1]) {
            res.push(intervals[i]);
        }
        // if there is an overlap, update the newInterval that will be inserted with the minimum between the start values
        // and the max between the end values
        else {
            newInterval = [(Math.min(newInterval[0], intervals[i][0])), Math.max(newInterval[1], intervals[i][1])];
        }
    }

    // note that we have not pushed the newInterval once we&apos;re out of the loop as the first if condition doesn&apos;t trigger
    // so we need to add it back
    res.push(newInterval);
    return res;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Leetcode Leetcode 57. Insert Interval</summary></entry><entry><title type="html">36/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/23/day36.html" rel="alternate" type="text/html" title="36/100 Days of Code" /><published>2022-09-23T15:30:23-07:00</published><updated>2022-09-23T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/23/day36</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/23/day36.html">&lt;h3 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h3&gt;

&lt;p&gt;Leetcode 56. Merge Intervals&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First need to sort the array by the first element in each interval&lt;/li&gt;
  &lt;li&gt;Then interate through the sorted intervals, building up a merged interval
    &lt;ol&gt;
      &lt;li&gt;If the start of the next interval is less than the end of the previous interval, they’re overlapping
        &lt;ul&gt;
          &lt;li&gt;Replace the previous interval’s end number with the greater of the current and existing end value&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;If they’re not overlapping, then no change is made and update the previous interval to be the current interval&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const merge = function(intervals) {
     intervals.sort((a, b) =&amp;gt; a[0] - b[0])
    // console.log(intervals)
    
    let prev = intervals[0];
    let merged = [prev];
    for (let curr of intervals) {
        if (curr[0] &amp;lt;= prev[1]) {
            prev[1] = prev[1] &amp;gt; curr[1] ? prev[1] : curr[1];
        } else {
            merged.push(curr);
            prev = curr;
        }
    }
    
    return merged;
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Leetcode</summary></entry><entry><title type="html">35/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/22/day35.html" rel="alternate" type="text/html" title="35/100 Days of Code" /><published>2022-09-22T15:30:23-07:00</published><updated>2022-09-22T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/22/day35</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/22/day35.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Taking a step back and thinking ahead today for the next few features to implement for Paper Trader.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;React Error Handling will be next logical step after I wrap up the Express Error Handling.
    &lt;ul&gt;
      &lt;li&gt;At the moment the React client doesn’t do anything when an error is encountered except hang, so with proper error handling this should mount a fallback component and have a better user experience.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I need to draft up a Database Schema to use for once I get ready for the database
    &lt;ul&gt;
      &lt;li&gt;There will likely be two tables, one for users and one for transactions
        &lt;ul&gt;
          &lt;li&gt;The user table will be very simple, such as username (as the primary key), funds, and probably last logged in&lt;/li&gt;
          &lt;li&gt;The transaction table will have a sequential (as the primary key), stock ticker, stock name, price, and transaction date&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I will probably have to use a web scraper to get real time stock data as almost all stock APIs require a paid tier for that feature
    &lt;ul&gt;
      &lt;li&gt;Likely will use Puppeteer to stay within the JS language, but it might not be a bad idea to pick up Selenium with Python to refresh my knowledge with Python&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Draft up a database schema?&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">34/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/21/day34.html" rel="alternate" type="text/html" title="34/100 Days of Code" /><published>2022-09-21T15:30:23-07:00</published><updated>2022-09-21T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/21/day34</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/21/day34.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Implemented the change I was considering yesterday, where the error object is modified before being sent off to the error handler. These changes have a few advantages over before:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;By modifiying the error object within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; block that corresponds to the error, I can directly modify the error object without having to do any additional conditional logic on which error object needs to be modified a certain way.&lt;/li&gt;
  &lt;li&gt;With this direct error message clean up, I no longer needed to use an extra middleware or conditional logic in my error handler, reducing the overall complexity of my routes.&lt;/li&gt;
  &lt;li&gt;Now regardless of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NODE_ENV&lt;/code&gt;, the error object has the sensitive information redacted as I removed the use of a conditional to determine when to redact the information. Since the sensitive information shouldn’t be seen easily, removing the conditional for when to redact information and just have it always redacted before being error logged is preferable. This is not necessarily a benefit specific to cleaning up the error object before being sent to the error handler, as this was a change that could have been made in the previous iterations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Hopefully wrap up this PR!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry><entry><title type="html">33/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/20/day33.html" rel="alternate" type="text/html" title="33/100 Days of Code" /><published>2022-09-20T15:30:23-07:00</published><updated>2022-09-20T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/20/day33</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/20/day33.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;

&lt;p&gt;Went through many iterations on cleaning up the error object, but everything from today and yesterday may not have been necessary…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My first major change today was adding two conditionals that would change the error object, one for Discord’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; route and one for Discord’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; route.
    &lt;ul&gt;
      &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; conditional, it would modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; property of the error response object to hid the Discord Paper Trader application’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret_code&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; conditional, it would remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bearer&lt;/code&gt; token value to prevent unauthorized access to a user’s information if the error logs were exposed&lt;/li&gt;
      &lt;li&gt;This process involved further changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExpressError&lt;/code&gt; class to account for the different properties that were being accessed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After changing making sure the conditional statements were modifying the error objects as intended, my generic error handler started to look very messy and no longer stayed true to it’s purpose of being generic.
    &lt;ul&gt;
      &lt;li&gt;So, that led me down to try to find ways to maybe pull the conditionals out of the generic handler, possible making a new middleware error handler just to modify the Discord error response object
        &lt;ul&gt;
          &lt;li&gt;The most useful resource was Express’ &lt;a href=&quot;https://expressjs.com/en/guide/error-handling.html&quot;&gt;documentaion on error handlers&lt;/a&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Based on the documentation, it was fairly straightforward to implement this new middleware to process my Discord error object:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  export function redactDiscordInfo(err: ExpressError, req: express.Request, res: express.Response, next: express.NextFunction) {
      const { headers, url, data } = err.config;

      if (process.env.NODE_ENV === &quot;production&quot;) {
          if (url === &apos;https://discord.com/api/oauth2/token&apos;) {
              const redactedData = &quot;client_id=REDACTED&amp;amp;client_secret=REDACTED&amp;amp;&quot; + `${data.substring(data.indexOf(&quot;grant_type&quot;))}`;

              err.config.data = redactedData;
          }
          if (url === &apos;https://discord.com/api/users/@me&apos;) {
              const redactAuthToken = headers.authorization.split(&quot; &quot;)[0];

              err.config.headers.authorization = redactAuthToken + &quot; REDACTED&quot;;
              err.request._header = &quot;REDACTED&quot;
          }
      }
      next(err);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, I just created a &lt;strong&gt;middleware&lt;/strong&gt;, albeit an error handling one.
    &lt;ul&gt;
      &lt;li&gt;This will be interacted with every error that is being passed on from routes calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next(error)&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;The only situations that this sensitive Discord information is being included in the request response cycle is when the application interacts with the Discord API, which is only during user log in.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Based on this limited scope of redacting the Discord information, having this redacting process be a middleware is not appropriate.
    &lt;ul&gt;
      &lt;li&gt;Which brings me to probably what I should have done at the beginning, all the way back on Day 28, when I separated the nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; block. Recognizing the fact that the two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; requests to the two different Discord routes, I should have kept the nested &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; as the error response objects were unique.&lt;/li&gt;
      &lt;li&gt;In addition, within each of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; blocks, I can modify the individual properties that have sensitive information before the error object is sent to the error handler.
        &lt;ul&gt;
          &lt;li&gt;This circumvents the need to have a conditional for which route the error is generated from, as the error object is being modified at the corresponding route it comes from.&lt;/li&gt;
          &lt;li&gt;Also, this reduces the size of the generic error handler as it no longer needs to have logic specific to the Discord request errors, forming a better separation of concerns.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Clean up my error object processing and wrap up the PR!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader</summary></entry></feed>