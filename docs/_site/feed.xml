<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/dev-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/dev-blog/" rel="alternate" type="text/html" /><updated>2022-09-11T00:23:40-07:00</updated><id>http://localhost:4000/dev-blog/feed.xml</id><title type="html">100 Days of Code</title><subtitle>Sammy Au&apos;s 100 Days of Code</subtitle><entry><title type="html">23/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/10/day23.html" rel="alternate" type="text/html" title="23/100 Days of Code" /><published>2022-09-10T15:30:23-07:00</published><updated>2022-09-10T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/10/day23</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/10/day23.html">&lt;h3 id=&quot;paper-trader-user-session-retrospective&quot;&gt;Paper Trader User Session Retrospective&lt;/h3&gt;

&lt;p&gt;Finally can wrap up this feature implementation! One more small change needs to be checked before I can merge the branch into main, but it’s essentially good to go at this point. As such, some quick thoughts on how this feature went about:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There were a few changes that my friend suggested that I considered doing originally, but ended up unsure if it was necessary. While it is frustrating to have to change code I wrote to what I considered originally, it’s also assuring to know that I knew what the better solution was. In terms of making that right decision more often, it comes down to having more experience and weighing the why one decision is preferrable over the other.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Although I enjoyed refactoring my code after I was comfortable that it works, there are situations where I focus on cleaning up the existing code rather than finding an alternative that could be better. A good example was cleaning up my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;randomStringGenerator&lt;/code&gt; function, when I could have just used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uuid&lt;/code&gt; package. I’d attribute this to being too deep in the code and needing to take time to step back and reevaluate the code objectively. However, the more exposure I have to these different problems, the better I’ll be at determining the optimal approach earlier on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s about it for the User Session retrospective. It’s been a while since the last one but that’s because I didn’t do one for the Fly.io deployment process. That process doesn’t really need a retrospective since it was more or less a straightforward process of following documentation and checking Stack Overflow discussions to resolve errors. After going through the Discord OAuth process, that experience carried over to helping me work through the Fly.io CI/CD process.&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Time to start all those PRs! Will probably start with adding the logout function since that has already been started, though I will have to deal with merge conflicts before I continue on.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session Retrospective</summary></entry><entry><title type="html">22/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/09/day22.html" rel="alternate" type="text/html" title="22/100 Days of Code" /><published>2022-09-09T15:30:23-07:00</published><updated>2022-09-09T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/09/day22</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/09/day22.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Final User Session Refactoring?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My friend and I were discussing if the typing for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useState&lt;/code&gt; needed to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useState&amp;lt;AN_INTERFACE | null&amp;gt;(null)&lt;/code&gt; or if it could just be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useState&amp;lt;AN_INTERFACE&amp;gt;(null)&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;I used this &lt;a href=&quot;https://stackoverflow.com/a/59126275&quot;&gt;Stack Overflow discussion&lt;/a&gt; to defend what I currently have, while my friend referred to &lt;a href=&quot;https://stackoverflow.com/a/61823158/7995306&quot;&gt;this one&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;After discussing the error I receive from not using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;| null&lt;/code&gt;, it came down to potentially different linters in our development environments. An interesting conclusion, but not clear which is necessarily better.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Another discussion that came out of this issue is the use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; versus &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;I personally thought &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; was better since it’s more of an explicit “the value is set to nothing”, and shows that the value is not supposed to be have a value.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;However my friend advocated for the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; instead as:&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;I like to think of null as “set to nothing”, whereas undefined is more like “nothing is set”&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;This lead me to digging deeper into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; use cases. Two discussions convinced me to try using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; more often than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;:
        &lt;ul&gt;
          &lt;li&gt;A &lt;a href=&quot;https://dev.to/andreasbergqvist/typescript-undefined-vs-null-3a22&quot;&gt;Dev post by Andreas Bergqvist&lt;/a&gt;.&lt;/li&gt;
          &lt;li&gt;And a much longer &lt;a href=&quot;https://github.com/sindresorhus/meta/discussions/7&quot;&gt;Github discussion&lt;/a&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Note, it comes down to use case as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; are used frequently in external libraries and APIs anyway (&lt;a href=&quot;https://twitter.com/sindresorhus/status/1114895254602129408?s=20&amp;amp;t=3WR93AtgXahsJuMb3VQyPA&quot;&gt;also looks like using both is a popular opinion&lt;/a&gt;). But, I’ll definitely give using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; more a shot.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Switched my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generateRandomString&lt;/code&gt; function to just utilize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uuid&lt;/code&gt; instead to form random strings. No need to reinvent the wheel for this one!&lt;/li&gt;
  &lt;li&gt;Also did some minor file/function changes like renaming my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Api.ts&lt;/code&gt; file to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PaperTraderApi.ts&lt;/code&gt; to match the class being exported.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;In the process of switching my functions to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;, I noticed I was being inconsistent with how I was accessing localStorage, sometimes using the functional interface and sometimes using direct property access.
    &lt;ul&gt;
      &lt;li&gt;This lead me to finding this &lt;a href=&quot;https://stackoverflow.com/questions/12632463/is-localstorage-getitemitem-better-than-localstorage-item-or-localstoragei/24904863#24904863&quot;&gt;discussion on localStorage&lt;/a&gt; best practices.&lt;/li&gt;
      &lt;li&gt;Here, it’s mentioned that using the functional interface (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getItem()&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[item]&lt;/code&gt;) is the preferred approach. However, the functional interface returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; if the item doesn’t exist whereas direct property access returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;So right after my decision to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;, I already encounted an exception. Given the fact that functional interface is the preferred method for iteracting with localStorage, I decided to stick to that and be flexible in my use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; in this web app.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;A restrospective?&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader Final User Session Refactoring?</summary></entry><entry><title type="html">21/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/08/day21.html" rel="alternate" type="text/html" title="21/100 Days of Code" /><published>2022-09-08T15:30:23-07:00</published><updated>2022-09-08T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/08/day21</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/08/day21.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session Refactoring Again&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A somewhat straightforward day of just implementing the changes planned out yesterday. However, with refactoring comes the breaking of previously functional parts.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Moved all my login/user session related functions that were previously defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component and used in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; to a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserSession.ts&lt;/code&gt; file. These functions were then defined as class methods to better organize the functions.
    &lt;ul&gt;
      &lt;li&gt;I orginially thought I would have to wrap these functions in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useCallback&lt;/code&gt; hook when defining them in the UserSession class, and list them as a dependency in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; that calls them&lt;/li&gt;
      &lt;li&gt;However, this would break the &lt;a href=&quot;https://reactjs.org/docs/hooks-rules.html&quot;&gt;Rule of Hooks&lt;/a&gt;, where they can only be used inside React functions. In addition, the were no compliation errors or linter warnings from not including these functions as in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; dependency array.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I changed my previous &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users/:username&lt;/code&gt; route to just be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/profile&lt;/code&gt;, where the JWT is decoded in the backend to determine what username to query the future database for.
    &lt;ul&gt;
      &lt;li&gt;However in doing so, I also had to change what was being stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res.locals.user&lt;/code&gt; after the JWT is verified by my middleware.&lt;/li&gt;
      &lt;li&gt;Previously I would just store the entire JWT in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res.locals.user&lt;/code&gt; and after all my middleware, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users/:username&lt;/code&gt; route would determine the username from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;req.params.username&lt;/code&gt;. However since I’m no longer sending a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; parameter, I needed to access just the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; property of the JWT being stored to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res.locals.user&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;The solution was to extract the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; property only if the verified JWT returned an object. This way I didn’t have to change the other parts of my app that relied on the returned JSON from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/profile&lt;/code&gt; having a different structure.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;verifiedUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JWT_SECRET_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;verifiedUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;verifiedUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Along with moving code to different files, I also started to organize them into different directories. Luckily VS Code prompted to automatically update the pathing for files that imported from these reorganized files. Unluckily, this not all files updated so there was some disgruntled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift&lt;/code&gt; +&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; Ctrl&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; and checking error messages to find the files that needed updating.
    &lt;ul&gt;
      &lt;li&gt;There was also an error with VS Code not properly finding a file after it was renamed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userSession.ts&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserSession.ts&lt;/code&gt;. I had to quit and reopen VS Code to resolve the issue.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;I noticed that there can be a long delay between redirecting the user to the Profile page after being redirected from Discord’s OAuth flow.
    &lt;ul&gt;
      &lt;li&gt;A quick fix that I tried was to add an additional conditional statement to see if there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; parameter in the URL. If there is, then the component will load a spinner. Then if there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; in the App context, upon remounting of the component it will redirect to the Profile page before it hits the spinner condition.&lt;/li&gt;
      &lt;li&gt;I’ll have to dig deeper to make the spinner appear properly, but good to know that this is a possible solution that can be fleshed out.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Based on this, a (growing) list of PRs to make just for fixing issues and improving the user experience:
    &lt;ol&gt;
      &lt;li&gt;Change the formatting for all the files.&lt;/li&gt;
      &lt;li&gt;Resolve navbar highlighting not being accurate after Discord Redirect.
        &lt;ul&gt;
          &lt;li&gt;Though I may have to scrap this feature altogether as my navbar is being redone for the logout function.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Having a Loading screen/spinner after Discord redirect so the user can tell their being logged in.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session Refactoring Again</summary></entry><entry><title type="html">20/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/07/day20.html" rel="alternate" type="text/html" title="20/100 Days of Code" /><published>2022-09-07T15:30:23-07:00</published><updated>2022-09-07T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/07/day20</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/07/day20.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session Refactoring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was unsure what some of the comments I received on the PR, so I had a short discussion with my friend about how to approach some changes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;More consistent error handling. At the moment my error handling is pretty much just placeholder statements to come back to once I flesh out Error cases. However, there is a danger that this gets buried as a todo that is never revisited. As such, I’ll bump up the priority for having error classes started. Some quick notes from the discussion with my friend just so I have a record of it too:
    &lt;ul&gt;
      &lt;li&gt;It’s important to consider how a user could end up in a specific case that triggers an error&lt;/li&gt;
      &lt;li&gt;in those situations one should consider reasonable ways to handle the error, eg. redirecting them back to the login page&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I didn’t realize I could &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export&lt;/code&gt; variables individually. Not a big change but will help in the future if I add more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; variables that need to be exported so I don’t have to remember to change the last line of the file to include it.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;// doing this&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEY1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some string 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEY2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some string 2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// instead of this&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEY1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some string 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEY2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some string 2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;KEY1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEY2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// will need to update this everytime to export new variables&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Originally my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component acted as just my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Routes&lt;/code&gt; file, but as more functions were added, that was no longer the case. This makes pulling them my new functions and routes into different files necessary.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Implement the changes to the PR and hopefully merge them into the main branch soon! (After another round of code review)&lt;/li&gt;
  &lt;li&gt;The next few PRs should be popping up soon:
    &lt;ol&gt;
      &lt;li&gt;Reformat all the files and exclude it from the commit history so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git blame&lt;/code&gt; doesn’t get overriden.&lt;/li&gt;
      &lt;li&gt;Add Error classes and routes.&lt;/li&gt;
      &lt;li&gt;The logout function is will have to be delayed as the above PRs will likely take precendent so I can minimize merge conflicts as much as possible.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session Refactoring</summary></entry><entry><title type="html">19/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/06/day19.html" rel="alternate" type="text/html" title="19/100 Days of Code" /><published>2022-09-06T15:30:23-07:00</published><updated>2022-09-06T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/06/day19</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/06/day19.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session Refactoring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Had the first review of my PR for adding User Session!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Some more major refactoring needs to be done
    &lt;ol&gt;
      &lt;li&gt;A lot of my functions that handle user session were written in the App component, but my friend suggested moving those out into a separate file too
        &lt;ul&gt;
          &lt;li&gt;Hopefully this will be a frictionless change but I imagine there might be some errors related to the function types and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; dependencies&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;My &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt; function which just checks if there’s a user that has been previously logged in by looking for a JWT in the localStorage could be streamlined better
        &lt;ul&gt;
          &lt;li&gt;Specifically, decoding the JWT for the username to send back to the server, which still decodes the JWT anyway to extract the username.&lt;/li&gt;
          &lt;li&gt;Making this change would also mean changing the way the route handles getting the user’s information from the eventual PostgreSQL database.&lt;/li&gt;
          &lt;li&gt;Current plans to make the changes would be having a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/profile&lt;/code&gt; route and when a request is made to the route, the JWT is decoded for the username and is used to query the database for that user’s information.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;I can also move my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Routes&lt;/code&gt; components into a different file so simplify my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component further&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Logout Function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also started implementing a logout function to end the user session.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The function itself wasn’t too complicated.
    &lt;ul&gt;
      &lt;li&gt;Set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; states to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Clear the localStorage of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userToken&lt;/code&gt; JWT&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, the tricky part came with how to display the Logout option in the navbar.
    &lt;ul&gt;
      &lt;li&gt;The way I had it set up was using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.map&lt;/code&gt; method on an array of strings that represented my navbar tabs. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&apos;Home&apos;, &apos;Profile&apos;, &apos;Login&apos;]&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;However, if a user exists, I wanted to replace the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; tab with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logout&lt;/code&gt; with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onClick&lt;/code&gt; function that calls my logout function.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I’ll need to do more tinkering around to see how to utilize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; method, where the last element &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logout&lt;/code&gt; will receive a different component
    &lt;ul&gt;
      &lt;li&gt;At the moment, I switched to hard coded navbar tabs. This may be the permanent solution if I can’t get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; method to work without errors. However, the Evergreen UI documentation use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; for their navbars so I want to follow that as much as possible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Wrap up the refactoring as I approach the end of this feature so I can start working on my retrospective&lt;/li&gt;
  &lt;li&gt;Wrap up the logout feature soon too as it’s closely tied to user sessions
    &lt;ul&gt;
      &lt;li&gt;I excluded it from this recent PR as it was already getting to big with about 15 file changes, 80 commits, and almost 500 lines of code added&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session Refactoring</summary></entry><entry><title type="html">18/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/05/day18.html" rel="alternate" type="text/html" title="18/100 Days of Code" /><published>2022-09-05T15:30:23-07:00</published><updated>2022-09-05T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/05/day18</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/05/day18.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Continued on with the refactoring to clean up the user session implementation!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The first big change was deleting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component.
    &lt;ul&gt;
      &lt;li&gt;This was always a temporary component to make sure the Discord OAuth flow redirect worked, but it was also supposed to act as a buffer page that would redirect the user again to hide the extra URL parameters that come from Discord (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt;).&lt;/li&gt;
      &lt;li&gt;However, with React Router, I can simply add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace&lt;/code&gt; prop when using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigate&lt;/code&gt; component to redirect the user. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace&lt;/code&gt; prop removes the previous location from the user’s history so they can’t hit the back button to access the route they were redirected away from.&lt;/li&gt;
      &lt;li&gt;This means that if I redirect back to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component from Discord and utilize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Navigate&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replace&lt;/code&gt; prop to redirect the user to where I actually want them to go, say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt;, this solves the original purpose of having the DiscordRedirect component. Therefore, I came to the obvious decicion to delete the unnecessary component.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Fortunately, not all the code from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; went to waste as some of it lives on in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; component and others moved up into the parent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component.
    &lt;ul&gt;
      &lt;li&gt;This restructuring also helped resolve my issue on implementing user session redirecting that I had trouble with yesterday.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Overall, a majority of today was just refactoring without much new code being written. Some other changes that had to be made were:
    &lt;ol&gt;
      &lt;li&gt;Updating the redirect URIs for Discord OAuth now that I’m no longer using the buffer route/component &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Updating docstrings after the component shuffling&lt;/li&gt;
      &lt;li&gt;Adding a conditional that redirects the user if they’re already logged in&lt;/li&gt;
      &lt;li&gt;Updating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hooks (see next section)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;learnings&quot;&gt;Learnings&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;While adding my conditional statement to see if a user existed in Context, I placed it near the top of my components, above the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hooks. However, this created an error: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React Hook &quot;useEffect&quot; is called conditionally. React Hooks must be called in the exact same order in every component render.&lt;/code&gt; Luckily, a quick solution once again by following this &lt;a href=&quot;https://stackoverflow.com/a/57621246&quot;&gt;Stack Overflow discussion&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;The error makes sense as React needs to always be in control over what is rendered on the DOM. If a conditional blocked the rendering of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook, it loses track of what has been called from previous renders. In addition, this is defined as the first &lt;a href=&quot;https://reactjs.org/docs/hooks-rules.html&quot;&gt;Rule of Hooks&lt;/a&gt; from the official React documention.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Try to add a logout function. This will require major reworking of the existing navigation bar, so that may have to be saved for a new PR.&lt;/li&gt;
  &lt;li&gt;Start a PR and get a code review!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session</summary></entry><entry><title type="html">17/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/04/day17.html" rel="alternate" type="text/html" title="17/100 Days of Code" /><published>2022-09-04T15:30:23-07:00</published><updated>2022-09-04T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/04/day17</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/04/day17.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Started the refactoring process… but ended up fleshing out user session some more.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First refactoring I had to do was wrap my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin&lt;/code&gt; function, which is essentially my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validateUser&lt;/code&gt; function from early on, in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useCallback&lt;/code&gt; hook to resolve the compilation warning about missing dependencies in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;However, after that I realized I need to properly handle the JWT being stored from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt; function in the App &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt;. This led to creating middleware that verifies the JWT, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticateJWT&lt;/code&gt; which utilizes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonwebtoken&lt;/code&gt; library’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify&lt;/code&gt; function, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ensureCurrectUser&lt;/code&gt;, which checks if the username being queried is the same as the one saved in localStorage making the request. In addition, I needed to send the JWT with my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;axios&lt;/code&gt; requests.
    &lt;ul&gt;
      &lt;li&gt;Not too complicated to implement currently as I don’t have many routes that need this protection yet, so as I add more routes this may become a painpoint if the authorization hasn’t been implemented properly.&lt;/li&gt;
      &lt;li&gt;The only unexpected part of this was when I created the middleware in a separate function, I had to define the type for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt; function parameters. Luckily, this was a very straight forward fix by following this &lt;a href=&quot;https://stackoverflow.com/questions/27676884/explicitly-specifying-types-for-express-application-request-response&quot;&gt;Stack Overflow discussion&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;For the axios calls, it was also straightfoward - adding an Authorization header containing the token and then having that be extracted in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticateJWT&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Now that I’m adding some route protection and user session is becoming more fleshed out, I need to redirect users away from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/login&lt;/code&gt; page if they’re already logged in and send them to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/login/discord-redirect&lt;/code&gt; page.
    &lt;ul&gt;
      &lt;li&gt;My initial idea was to add an additional condition in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; that checks if the component is being accessed after receiving an auth code from Discord.&lt;/li&gt;
      &lt;li&gt;Unfortunately this led to both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; component and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component to not mount properly.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;As it stands, I’m not quite sure how to properly implement the redirecting with my current set up. My possible solutions are:
    &lt;ul&gt;
      &lt;li&gt;Changing how I determine how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component is mounted
        &lt;ul&gt;
          &lt;li&gt;I’m using a boolean state based on if there’s an auth code in the URL (which happens if Discord redirects back to my app). If a user were to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login&lt;/code&gt; route and I try to redirect to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discord-redirect&lt;/code&gt;, there won’t be an auth code to properly change the boolean state&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Separate out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component so it’s not a nested route with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; and then utilize React Router to have private route components.
        &lt;ul&gt;
          &lt;li&gt;This may be the likely approach as the DiscordRedirect was intended to be a temporary component anyways and it’s starting to act more like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profile&lt;/code&gt; component.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Either way, there would be a fair amount of restructing and refactoring of my components to handle this change in data flow.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Delve deeper into how to handle the login route redirecting based on UserContext and update the docstrings as appropriate (since a few of them are now inaccurate with the recent refactoring).&lt;/li&gt;
  &lt;li&gt;I also noticed my default tab spacing was set at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt; when it really should have been set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;. Since changing the formatting will show up as changes to everything in a file, that will likely be a separate PR which doesn’t make any other changes to the code.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session</summary></entry><entry><title type="html">16/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/03/day16.html" rel="alternate" type="text/html" title="16/100 Days of Code" /><published>2022-09-03T15:30:23-07:00</published><updated>2022-09-03T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/03/day16</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/03/day16.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;
Another day of trying to debug type issues!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Following the &lt;a href=&quot;https://stackoverflow.com/questions/59125973/react-typescript-argument-of-type-is-not-assignable-to-parameter-of-type&quot;&gt;Stack Overflow discussion&lt;/a&gt; I saw yesterday, I added an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; and assigned the type to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useState&lt;/code&gt; input, resolving that error message.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nl&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setCurrentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/UserContext.Provider&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;However, making this change broke my login function as that also set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentUser&lt;/code&gt; as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; for the App Context, but adding the interface cause a type disagreement. Luckily, the solution was simply removing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setCurrentUser&lt;/code&gt; from the login function and only allow the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook that has the localStorage token in the dependency array to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentUser&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Note this works because the login function is what sets the token in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; dependency array&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Then going back to clean up my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component to utilize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useContext&lt;/code&gt; hook I encountered another interesting bug
    &lt;ul&gt;
      &lt;li&gt;At the moment, my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useContext&lt;/code&gt; provides the value for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserContext&lt;/code&gt; which is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; object until the username is set from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt; function in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook in the App component.&lt;/li&gt;
      &lt;li&gt;However, when I check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typeof&lt;/code&gt; for the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; extracted from UserContext after it’s set, the type is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Despite it being a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; when I pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; into the Paragraph component from the Evergreen component library, I receive an error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;This JSX tag&apos;s &apos;children&apos; prop expects a single child of type &apos;Element | undefined&apos;, but multiple children were provided&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To resolve this bug, I came across these possible solutions from &lt;a href=&quot;https://stackoverflow.com/questions/62382324/react-typescript-this-jsx-tags-children-prop-expects-a-single-child-of-type&quot;&gt;Stack Overflow&lt;/a&gt; and a &lt;a href=&quot;https://bobbyhadz.com/blog/react-this-tags-children-prop-expects-single-child&quot;&gt;blog post&lt;/a&gt; about this error.
    &lt;ul&gt;
      &lt;li&gt;For my use case, wrapping the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prop&lt;/code&gt; being passed into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Paragraph&lt;/code&gt; component in a fragment is enough. This may be an issue as the data in the Context expands to include other values, but in terms of trying to figure out how to properly provide and subscribe to Context, this is good for now.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue cleaning up and refactoring my hooks, namely the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; as there is a dependency array warning that will cause build errors.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session Another day of trying to debug type issues!</summary></entry><entry><title type="html">15/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/02/day15.html" rel="alternate" type="text/html" title="15/100 Days of Code" /><published>2022-09-02T15:30:23-07:00</published><updated>2022-09-02T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/02/day15</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/02/day15.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Tried to flesh out the user session process today
    &lt;ul&gt;
      &lt;li&gt;The planned flow at a high level is:
        &lt;ol&gt;
          &lt;li&gt;On app’s first load of the app/portfolio page, it reaches out to backend&lt;/li&gt;
          &lt;li&gt;(If logged in) backend will take JWT and return the application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; + portfolio info&lt;/li&gt;
          &lt;li&gt;Username will be available from application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This brings to question if decoding the username and then sending that back to the backend is necessary
    &lt;ul&gt;
      &lt;li&gt;The original idea was decoding the username from the JWT in localStorage and sending that as a parameter to a backend route that would return the user’s information (like portfolio) along with a JWT to be verified&lt;/li&gt;
      &lt;li&gt;Then the returned user information will be stored in the application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However with this approach there’s a concern about the returned data being too big (e.g. a large portfolio) and the app context really only needs the username
    &lt;ul&gt;
      &lt;li&gt;At the moment I’ll be marking these concerns down to think about but I’ll continue on with the approach of returning the user’s information/portfolio to be stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In addition to trying to expand on how to handle user sessions, I moved my login function from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component up to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component. This was needed as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component is where I want the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; to be set and provided from, and logging in also provides the information needed for updating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;. This login function is then passed down to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component
    &lt;ul&gt;
      &lt;li&gt;This will also be helpful for when if I decide to remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component and have the login function passed to a different component&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;With this change in the login function and having it update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; too, I encountered type issues regarding the state used for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;As it stands, the default state for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentUser&lt;/code&gt; state is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; and upon logging in or restoring a user session, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentUser&lt;/code&gt; is set to the user’s username (for now while I’m working on making sure user sessions is working).&lt;/li&gt;
      &lt;li&gt;Haven’t looked too deeply into this issue yet, but possible solutions I’ve seen are &lt;a href=&quot;https://stackoverflow.com/questions/59125973/react-typescript-argument-of-type-is-not-assignable-to-parameter-of-type&quot;&gt;applying an interface&lt;/a&gt; or maybe utilizing a guard statement.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue expanding the user session implementation and debug these typing issues.&lt;/li&gt;
  &lt;li&gt;Refactor the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component as that now has a lot of overloaded variables and removing them may present more issues that’ll need to be resolved.&lt;/li&gt;
  &lt;li&gt;I imagine this is the final stretch for this feature, so a retro will be coming soon&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session</summary></entry><entry><title type="html">14/100 Days of Code</title><link href="http://localhost:4000/dev-blog/100days/2022/09/01/day14.html" rel="alternate" type="text/html" title="14/100 Days of Code" /><published>2022-09-01T15:30:23-07:00</published><updated>2022-09-01T15:30:23-07:00</updated><id>http://localhost:4000/dev-blog/100days/2022/09/01/day14</id><content type="html" xml:base="http://localhost:4000/dev-blog/100days/2022/09/01/day14.html">&lt;h3 id=&quot;paper-trader&quot;&gt;Paper Trader&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;User Session&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jumped back into working on getting user sessions set up! &lt;sub&gt;Except I had to spend some time resolving merge conflicts with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch after all my recent PRs being merged…&lt;/sub&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First thing I needed to change was figuring out how to store user information for the entire app to have access to.
    &lt;ol&gt;
      &lt;li&gt;I updated my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscordRedirect&lt;/code&gt; component to store the JWT sent from the server.
        &lt;ul&gt;
          &lt;li&gt;This component will likely be removed as I expand the app since it was more of a temporary component to make sure I could get Discord OAuth working.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Then in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component I needed an extra function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt;, inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook that checks if there’s a JWT token in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localStorage&lt;/code&gt;.
        &lt;ul&gt;
          &lt;li&gt;The goal of this function is to decode the JWT token and extract the username from the token to send to the server.&lt;/li&gt;
          &lt;li&gt;Upon successful validation of the information in the JWT token, the server will send back the user’s info which will be set as the current user&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;In order for this whole flow to work out, I would need a new route in my server (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/user/:username&lt;/code&gt;), a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PaperTraderApi&lt;/code&gt; method to send the necessary information to this route, and utilize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.Context&lt;/code&gt; to share the current user information for all components that subscribe to the context.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;With the plan set up, implementing it was mostly straightforward. Everything went smoothly except for trying to decode the JWT token in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getCurrentUser&lt;/code&gt; function, where I encountered a very confusing bug.
    &lt;ol&gt;
      &lt;li&gt;I had some type issues with the returned value from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt;function. I tried doing the same conditional checks that I did when I last had type issues with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt; by only accessing the value within conditional statements that are true.&lt;/li&gt;
      &lt;li&gt;Unfortunately that wasn’t enough, and after whittling away at the issue, my bug came down to:
        &lt;ul&gt;
          &lt;li&gt;The Chrome console showed that the value from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodeToken&lt;/code&gt;, which I named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodedToken&lt;/code&gt; is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt; variable that had key value pairs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{username: USERNAME_STRING, iat: NUMBERS}&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; is the key value pair I wanted to extract&lt;/li&gt;
          &lt;li&gt;However, I kept getting a compilation error from Typescript where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodedToken&lt;/code&gt; was treated as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; so when I tried to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; key via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dedcodedToken.username&lt;/code&gt;, I got an error that stated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property &apos;username&apos; does not exist on type &apos;string&apos;.&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;This was very confusing as when I did &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log(typeof decodedToken)&lt;/code&gt;, I got &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; and the variable showed up as an object structure with key value pairs&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;After some time, I asked a friend for help and he suggested trying to convert the variable into JSON which worked!
    &lt;ol&gt;
      &lt;li&gt;First, I had to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON.stringify(decodedToken)&lt;/code&gt; and store that as a variable, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonToken&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Then, I saved the result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON.parse(jsonToken)&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parsedJson&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Finally, I could do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parsedJson.username&lt;/code&gt; to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; value without any errors&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;This felt like a very roundabout way resolve this issue. However, the typing of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodedToken&lt;/code&gt; is explicitly changed into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; and then an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt;, which is probably why Typescript compilation doesn’t have issues anymore.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Continue expanding the user session implementation, and then start refactoring again
    &lt;ul&gt;
      &lt;li&gt;There are some functions and states that could be brought up higher in the component hierarchy now that I’ve expanded on what data the components need to have access to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="100Days" /><summary type="html">Paper Trader User Session</summary></entry></feed>