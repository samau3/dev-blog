---
layout: post
title:  "44/100 Days of Code"
date:   2022-10-4 15:30:23 -0700
categories: 100Days
comments: true
---

### Paper Trader

Continued refactoring my Express API Routes!

1. I moved my axios requests into a separate file outside of my `/login` and `/profile` routes
    - Once again a pretty straightforward process, until it wasn't
2. In my `axios` request builder, I orginally had this set up:
    ~~~
    static async request(endpoint: string, headers: any, data = {}, method = "GET") {
        const url = `${BASE_DISCORD_API_URL}/${endpoint}`;

        const response = (await axios({ method, url, data, headers })).data;
        return response;
    }
    ~~~
    - I thought by having the default value of `data` be an empty object, whenever I have a `GET` request there would be an empty object for that property in the request. Note, in a `POST` request, `data` is provided as an input argument 

3. When I went to test my login flow again, I kept getting this error `Your client has issued a malformed or illegal request`. Luckily with my separate catch blocks indicating which request is generating the error, I found that my `GET` request to the Discord `/users` route was not the correct request format.
    - The issue was that my `axios` `GET` request was sending an empty object in the `data` property, when it should be sending `undefined` for the data property.

4. To resolve this, my generic `axios` request method needed to set the data property as `undefined` when a `GET` request is made:
    ~~~
    static async request(endpoint: string, headers: any, body = {}, method = "GET") {
        const url = `${BASE_DISCORD_API_URL}/${endpoint}`;
        const data = (method === "GET")
        ? undefined
        : body;

        const response = (await axios({ method, url, data, headers })).data;
        return response;
    }
    ~~~
    
### Learnings
1. Originally I was planning to just do `return await` in my new class making axios requests. However, when I double checked if that was a good idea, I found this documentation from [ESLint](https://eslint.org/docs/latest/rules/no-return-await).
    - The gist is that doing `return await` is bad practice as it leads to performance issues related to call stack Promise resolving. However, it's allowed inside a try catch block. 

### Next Steps
1. Start on implementing the stock API!
    - This will likely start as building out the feature both in the frontend and backend, but if it gets too big I'll split up the PR