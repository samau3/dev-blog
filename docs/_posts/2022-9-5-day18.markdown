---
layout: post
title:  "18/100 Days of Code"
date:   2022-09-5 15:30:23 -0700
categories: 100Days
comments: true
---

### Paper Trader
**User Session**

Continued on with the refactoring to clean up the user session implementation! 

1. The first big change was deleting the `DiscordRedirect` component.
    - This was always a temporary component to make sure the Discord OAuth flow redirect worked, but it was also supposed to act as a buffer page that would redirect the user again to hide the extra URL parameters that come from Discord (i.e. `code` and `state`).
    - However, with React Router, I can simply add the `replace` prop when using the `Navigate` component to redirect the user. The `replace` prop removes the previous location from the user's history so they can't hit the back button to access the route they were redirected away from.
    - This means that if I redirect back to the `Login` component from Discord and utilize `Navigate` with the `replace` prop to redirect the user to where I actually want them to go, say `Profile`, this solves the original purpose of having the DiscordRedirect component. Therefore, I came to the obvious decicion to delete the unnecessary component.

2. Fortunately, not all the code from `DiscordRedirect` went to waste as some of it lives on in the `Profile` component and others moved up into the parent `Login` component. 
    - This restructuring also helped resolve my issue on implementing user session redirecting that I had trouble with yesterday.

3. Overall, a majority of today was just refactoring without much new code being written. Some other changes that had to be made were:
    1. Updating the redirect URIs for Discord OAuth now that I'm no longer using the buffer route/component `DiscordRedirect`
    2. Updating docstrings after the component shuffling
    3. Adding a conditional that redirects the user if they're already logged in
    4. Updating `useEffect` hooks (see next section)

### Learnings
1. While adding my conditional statement to see if a user existed in Context, I placed it near the top of my components, above the `useEffect` hooks. However, this created an error: `React Hook "useEffect" is called conditionally. React Hooks must be called in the exact same order in every component render.` Luckily, a quick solution once again by following this [Stack Overflow discussion](https://stackoverflow.com/a/57621246).
    - The error makes sense as React needs to always be in control over what is rendered on the DOM. If a conditional blocked the rendering of the `useEffect` hook, it loses track of what has been called from previous renders. In addition, this is defined as the first [Rule of Hooks](https://reactjs.org/docs/hooks-rules.html) from the official React documention.

### Next Steps
1. Try to add a logout function. This will require major reworking of the existing navigation bar, so that may have to be saved for a new PR.
2. Start a PR and get a code review! 