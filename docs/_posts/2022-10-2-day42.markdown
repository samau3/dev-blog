---
layout: post
title:  "42/100 Days of Code"
date:   2022-10-2 15:30:23 -0700
categories: 100Days
comments: true
---

### Leetcode

Went back through old problems I did on Grind 75.

1. Week 1 #1, [Leetcode 1. Two Sum](https://leetcode.com/problems/two-sum/)
    - Naive solution is to do a nested for loop (`O(n2)`)
        - Outer for loop starts at an element, then the inner for loop checks of the rest of the elements in the array sum to target
    - Optimal solution would be to utilize a hashmap (`O(n)`)
        - For each iterations, find the difference between current value and target value
            - Then check if the difference has been encountered before, returning the current index and stored index from previously seen value
            - If the difference has not been seen before, store the index and value in a hashmap
2. Week 1 #2, [Leetcode 20. Valid Parentheses](https://leetcode.com/problems/valid-parentheses)
    - Utilize a stack (`O(n)`)
        - Iterate through input string, storing the open parentheses
        - If a closing parenthesis is encountered, pop the stack and see if they're a matching pair; return false if not matching
        - After iterating through the loop, check if the stack is empty incase there was no closing parenthesis to trigger the conditional check
3. Week 1 #3, [Leetcode 21. Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists)
    - Iterate through the linkedLists (`O(n)`)
        - Initialize an empty linkedlist with a `new ListNode` that represents merged list output, then declare a variable to manipulate as a node of the empty list
        - Iterate through the two input lists as long as both lists still have values
            - Use conditionals to compare which node to add to the merged list
            - Update lists and nodes being pointed at to properly represent next nodes to check
        - After finishing the loop, the lists may be of uneven length so need to add remaining nodes from longer list to merged list
        - Need to return `mergedList.next` as regular `mergedList` represents the empty node we initialized

